#include "DBC.h"
#include "variables.h"
#include "functions.h"
// #include "constant.h"
#include <fstream>
#include <chrono>
using namespace std;
using namespace std::chrono;

#ifndef DBC_COEF
#define DBC_COEF 10 // 次优DBC参数设置，本参数越小计算DBC越快，但DBC质量越好。
#endif

#if CURVE==NID_secp128r1
// int b_try[] = {
// 	17, 18, 16, 19, 15, 14, 20, 13, 21, 12, 11, 22, 10, 23, 9, 8, 24, 7, 6, 25, 5, 4, 26, 3, 2, 27, 1, 28, 0, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41};
int b_try[] = {
	35, 36, 34, 37, 33, 38, 32, 39, 31, 30, 40, 29, 41, 28, 42, 27, 26, 43, 25, 24, 44, 23, 22, 45, 21, 20, 46, 19, 18, 47, 17, 16, 48, 15, 14, 49, 13, 12, 50, 11, 10, 51, 9, 8, 52, 7, 6, 5, 53, 4, 3, 54, 2, 1, 55, 0, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81};
#endif

#if CURVE==NID_secp256k1
// int b_try[] = {
// 	35, 36, 34, 37, 33, 38, 32, 39, 31, 30, 40, 29, 41, 28, 42, 27, 26, 43, 25, 24, 44, 23, 22, 45, 21, 20, 46, 19, 18, 47, 17, 16, 48, 15, 14, 49, 13, 12, 50, 11, 10, 51, 9, 8, 52, 7, 6, 5, 53, 4, 3, 54, 2, 1, 55, 0, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81};
int b_try[] = {
	72, 73, 71, 74, 70, 75, 69, 68, 76, 67, 77, 66, 78, 65, 79, 64, 63, 80, 62, 81, 61, 60, 82, 59, 83, 58, 57, 84, 56, 55, 85, 54, 53, 86, 52, 51, 87, 50, 49, 88, 48, 47, 89, 46, 45, 90, 44, 43, 91, 42, 41, 92, 40, 39, 38, 93, 37, 36, 94, 35, 34, 95, 33, 32, 96, 31, 30, 29, 97, 28, 27, 98, 26, 25, 99, 24, 23, 100, 22, 21, 20, 101, 19, 18, 102, 17, 16, 103, 15, 14, 104, 13, 12, 11, 105, 10, 9, 106, 8, 7};

#endif

#if CURVE==NID_secp384r1
// int b_try[] = {
// 	54, 53, 55, 52, 56, 51, 57, 50, 58, 49, 48, 59, 47, 60, 46, 61, 45, 44, 62, 43, 42, 63, 41, 64, 40, 39, 65, 38, 37, 66, 36, 35, 67, 34, 33, 68, 32, 31, 69, 30, 29, 70, 28, 27, 26, 71, 25, 24, 72, 23, 22, 73, 21, 20, 19, 74, 18, 17, 75, 16, 15, 76, 14, 13, 77, 12, 11, 10, 78, 9, 8, 79, 7, 6, 80, 5, 4, 3, 81, 2, 1, 82, 0, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99};
int b_try[] = {
	109, 110, 108, 111, 107, 106, 112, 105, 113, 104, 114, 103, 115, 102, 116, 101, 117, 100, 99, 118, 98, 119, 97, 120, 96, 95, 121, 94, 122, 93, 92, 123, 91, 124, 90, 89, 125, 88, 87, 126, 86, 85, 127, 84, 83, 128, 82, 81, 129, 80, 79, 130, 78, 77, 131, 76, 75, 132, 74, 73, 133, 72, 71, 70, 134, 69, 68, 135, 67, 66, 136, 65, 64, 63, 137, 62, 61, 138, 60, 59, 139, 58, 57, 140, 56, 55, 54, 141, 53, 52, 142, 51, 50, 49, 143, 48, 47, 144, 46, 45};
#endif

#if CURVE==NID_secp521r1
// int b_try[] = {
// 	72, 73, 71, 74, 70, 75, 69, 68, 76, 67, 77, 66, 78, 65, 79, 64, 63, 80, 62, 81, 61, 60, 82, 59, 83, 58, 57, 84, 56, 55, 85, 54, 53, 86, 52, 51, 87, 50, 49, 88, 48, 47, 89, 46, 45, 90, 44, 43, 91, 42, 41, 92, 40, 39, 38, 93, 37, 36, 94, 35, 34, 95, 33, 32, 96, 31, 30, 29, 97, 28, 27, 98, 26, 25, 99, 24, 23, 100, 22, 21, 20, 101, 19, 18, 102, 17, 16, 103, 15, 14, 104, 13, 12, 11, 105, 10, 9, 106, 8, 7};
int b_try[] = {
	146, 147, 145, 148, 144, 149, 143, 150, 142, 151, 141, 152, 140, 153, 139, 154, 138, 137, 155, 136, 156, 135, 157, 134, 133, 158, 132, 159, 131, 160, 130, 129, 161, 128, 162, 127, 126, 163, 125, 124, 164, 123, 122, 165, 121, 166, 120, 119, 167, 118, 117, 168, 116, 115, 169, 114, 113, 170, 112, 111, 110, 171, 109, 108, 172, 107, 106, 173, 105, 104, 103, 174, 102, 101, 175, 100, 99, 176, 98, 97, 177, 96, 95, 94, 178, 93, 92, 179, 91, 90, 180, 89, 88, 181, 87, 86, 85, 182, 84, 83};
#endif

#ifndef CURVE
#if INTS == 2
int b_try[] = {
	8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 2, 13, 1, 14, 0, 15, 16, 17, 18, 19, 20};
#endif
#if INTS == 3
int b_try[] = {
	17, 18, 16, 19, 15, 14, 20, 13, 21, 12, 11, 22, 10, 23, 9, 8, 24, 7, 6, 25, 5, 4, 26, 3, 2, 27, 1, 28, 0, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41};
#endif
#if INTS == 4
int b_try[] = {
	26, 27, 25, 24, 28, 23, 29, 22, 30, 21, 31, 20, 19, 32, 18, 33, 17, 16, 34, 15, 14, 35, 13, 12, 36, 11, 10, 37, 9, 8, 38, 7, 6, 39, 5, 4, 40, 3, 2, 41, 1, 0, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61};
#endif
#if INTS == 5
int b_try[] = {
	35, 36, 34, 37, 33, 38, 32, 39, 31, 30, 40, 29, 41, 28, 42, 27, 26, 43, 25, 24, 44, 23, 22, 45, 21, 20, 46, 19, 18, 47, 17, 16, 48, 15, 14, 49, 13, 12, 50, 11, 10, 51, 9, 8, 52, 7, 6, 5, 53, 4, 3, 54, 2, 1, 55, 0, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81};
#endif
#if INTS == 6
int b_try[] = {
	44, 45, 43, 46, 42, 47, 41, 48, 40, 49, 39, 38, 50, 37, 51, 36, 52, 35, 34, 53, 33, 32, 54, 31, 55, 30, 29, 56, 28, 27, 57, 26, 25, 24, 58, 23, 22, 59, 21, 20, 60, 19, 18, 61, 17, 16, 62, 15, 14, 13, 63, 12, 11, 64, 10, 9, 65, 8, 7, 6, 66, 5, 4, 67, 3, 2, 68, 1, 0, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99};
#endif
#if INTS == 7
int b_try[] = {
	54, 53, 55, 52, 56, 51, 57, 50, 58, 49, 48, 59, 47, 60, 46, 61, 45, 44, 62, 43, 42, 63, 41, 64, 40, 39, 65, 38, 37, 66, 36, 35, 67, 34, 33, 68, 32, 31, 69, 30, 29, 70, 28, 27, 26, 71, 25, 24, 72, 23, 22, 73, 21, 20, 19, 74, 18, 17, 75, 16, 15, 76, 14, 13, 77, 12, 11, 10, 78, 9, 8, 79, 7, 6, 80, 5, 4, 3, 81, 2, 1, 82, 0, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99};
#endif
#if INTS == 8
int b_try[] = {
	63, 62, 64, 61, 65, 60, 66, 59, 67, 58, 68, 57, 69, 56, 55, 70, 54, 71, 53, 52, 72, 51, 73, 50, 49, 74, 48, 47, 75, 46, 45, 76, 44, 43, 77, 42, 41, 78, 40, 39, 79, 38, 37, 80, 36, 35, 81, 34, 33, 82, 32, 31, 30, 83, 29, 28, 84, 27, 26, 85, 25, 24, 23, 86, 22, 21, 87, 20, 19, 88, 18, 17, 89, 16, 15, 14, 90, 13, 12, 91, 11, 10, 92, 9, 8, 7, 93, 6, 5, 94, 4, 3, 95, 2, 1, 96, 0, 97, 98, 99};
#endif
#if INTS == 9
int b_try[] = {
	72, 73, 71, 74, 70, 75, 69, 68, 76, 67, 77, 66, 78, 65, 79, 64, 63, 80, 62, 81, 61, 60, 82, 59, 83, 58, 57, 84, 56, 55, 85, 54, 53, 86, 52, 51, 87, 50, 49, 88, 48, 47, 89, 46, 45, 90, 44, 43, 91, 42, 41, 92, 40, 39, 38, 93, 37, 36, 94, 35, 34, 95, 33, 32, 96, 31, 30, 29, 97, 28, 27, 98, 26, 25, 99, 24, 23, 100, 22, 21, 20, 101, 19, 18, 102, 17, 16, 103, 15, 14, 104, 13, 12, 11, 105, 10, 9, 106, 8, 7};
#endif
#if INTS == 10
int b_try[] = {
	81, 82, 80, 83, 79, 84, 78, 85, 77, 86, 76, 75, 87, 74, 88, 73, 89, 72, 90, 71, 70, 91, 69, 92, 68, 67, 93, 66, 94, 65, 64, 95, 63, 62, 96, 61, 60, 97, 59, 58, 98, 57, 56, 99, 55, 54, 100, 53, 52, 101, 51, 50, 102, 49, 48, 47, 103, 46, 45, 104, 44, 43, 105, 42, 41, 106, 40, 39, 38, 107, 37, 36, 108, 35, 34, 109, 33, 32, 31, 110, 30, 29, 111, 28, 27, 112, 26, 25, 24, 113, 23, 22, 114, 21, 20, 115, 19, 18, 116, 17};
#endif
#if INTS == 11
int b_try[] = {
	91, 90, 92, 89, 93, 88, 87, 94, 86, 95, 85, 96, 84, 97, 83, 98, 82, 81, 99, 80, 100, 79, 101, 78, 77, 102, 76, 75, 103, 74, 104, 73, 72, 105, 71, 70, 106, 69, 68, 107, 67, 66, 108, 65, 64, 109, 63, 62, 110, 61, 60, 111, 59, 58, 112, 57, 56, 55, 113, 54, 53, 114, 52, 51, 115, 50, 49, 116, 48, 47, 46, 117, 45, 44, 118, 43, 42, 119, 41, 40, 39, 120, 38, 37, 121, 36, 35, 122, 34, 33, 123, 32, 31, 30, 124, 29, 28, 125, 27, 26};
#endif
#if INTS == 12
int b_try[] = {
	100, 99, 101, 98, 102, 97, 103, 96, 104, 95, 105, 94, 106, 93, 92, 107, 91, 108, 90, 109, 89, 88, 110, 87, 111, 86, 112, 85, 84, 113, 83, 82, 114, 81, 80, 115, 79, 116, 78, 77, 117, 76, 75, 118, 74, 73, 119, 72, 71, 70, 120, 69, 68, 121, 67, 66, 122, 65, 64, 123, 63, 62, 61, 124, 60, 59, 125, 58, 57, 126, 56, 55, 127, 54, 53, 52, 128, 51, 50, 129, 49, 48, 130, 47, 46, 45, 131, 44, 43, 132, 42, 41, 133, 40, 39, 38, 134, 37, 36, 135};
#endif
#if INTS == 13
int b_try[] = {
	109, 110, 108, 111, 107, 106, 112, 105, 113, 104, 114, 103, 115, 102, 116, 101, 117, 100, 99, 118, 98, 119, 97, 120, 96, 95, 121, 94, 122, 93, 92, 123, 91, 124, 90, 89, 125, 88, 87, 126, 86, 85, 127, 84, 83, 128, 82, 81, 129, 80, 79, 130, 78, 77, 131, 76, 75, 132, 74, 73, 133, 72, 71, 70, 134, 69, 68, 135, 67, 66, 136, 65, 64, 63, 137, 62, 61, 138, 60, 59, 139, 58, 57, 140, 56, 55, 54, 141, 53, 52, 142, 51, 50, 49, 143, 48, 47, 144, 46, 45};
#endif
#if INTS == 14
int b_try[] = {
	118, 119, 117, 120, 116, 121, 115, 122, 114, 123, 113, 124, 112, 111, 125, 110, 126, 109, 127, 108, 128, 107, 106, 129, 105, 130, 104, 131, 103, 102, 132, 101, 100, 133, 99, 134, 98, 97, 135, 96, 95, 136, 94, 93, 137, 92, 91, 138, 90, 89, 139, 88, 87, 140, 86, 85, 141, 84, 83, 142, 82, 81, 143, 80, 79, 78, 144, 77, 76, 145, 75, 74, 146, 73, 72, 147, 71, 70, 69, 148, 68, 67, 149, 66, 65, 150, 64, 63, 151, 62, 61, 60, 152, 59, 58, 153, 57, 56, 154, 55};
#endif
#if INTS == 15
int b_try[] = {
	128, 127, 129, 126, 130, 125, 131, 124, 132, 123, 122, 133, 121, 134, 120, 135, 119, 136, 118, 137, 117, 116, 138, 115, 139, 114, 113, 140, 112, 141, 111, 142, 110, 109, 143, 108, 107, 144, 106, 145, 105, 104, 146, 103, 102, 147, 101, 100, 148, 99, 98, 149, 97, 96, 150, 95, 94, 151, 93, 92, 91, 152, 90, 89, 153, 88, 87, 154, 86, 85, 84, 155, 83, 82, 156, 81, 80, 157, 79, 78, 77, 158, 76, 75, 159, 74, 73, 160, 72, 71, 161, 70, 69, 68, 162, 67, 66, 163, 65, 64};
#endif
#if INTS == 16
int b_try[] = {
	137, 136, 138, 135, 139, 134, 140, 133, 141, 132, 142, 131, 143, 130, 144, 129, 128, 145, 127, 146, 126, 147, 125, 124, 148, 123, 149, 122, 150, 121, 120, 151, 119, 152, 118, 117, 153, 116, 154, 115, 114, 155, 113, 112, 156, 111, 110, 157, 109, 108, 158, 107, 106, 159, 105, 104, 160, 103, 102, 161, 101, 100, 162, 99, 98, 97, 163, 96, 95, 164, 94, 93, 165, 92, 91, 166, 90, 89, 88, 167, 87, 86, 168, 85, 84, 169, 83, 82, 170, 81, 80, 171, 79, 78, 77, 172, 76, 75, 173, 74};
#endif
#if INTS == 17
int b_try[] = {
	146, 147, 145, 148, 144, 149, 143, 150, 142, 151, 141, 152, 140, 153, 139, 154, 138, 137, 155, 136, 156, 135, 157, 134, 133, 158, 132, 159, 131, 160, 130, 129, 161, 128, 162, 127, 126, 163, 125, 124, 164, 123, 122, 165, 121, 166, 120, 119, 167, 118, 117, 168, 116, 115, 169, 114, 113, 170, 112, 111, 110, 171, 109, 108, 172, 107, 106, 173, 105, 104, 103, 174, 102, 101, 175, 100, 99, 176, 98, 97, 177, 96, 95, 94, 178, 93, 92, 179, 91, 90, 180, 89, 88, 181, 87, 86, 85, 182, 84, 83};
#endif
#endif

int getSubOptimalDBC(myBigInt<INTS> n, int dbc_coef)
{
	// 将n转为双精度类型
	double dbl_n = n.to_double();
	// 计算B1,B2
	double B1 = 0.9091372900969896 * dbl_n; // 9*n/(7*sqrt(2))
	double B2 = 1.0774960475223583 * dbl_n; // 16*sqrt(2)*n/21
	// 计算LBound,RBound
	int LBound;
	int RBound;
	int DBC_index = 0;
	DBC_len[1] = 1 << 20; // 初始化为足够大的数，保证在只计算出1个DBC时该DBC被识别为为最短的那个，减少条件判断
	int count_DBC = 0;
	for (int z = 0; z < sizeof(b_try) / sizeof(int); z++)
	{
		int b = b_try[z];
		LBound = log(B1 / d_pow23_all[0][b]) / log(2) + 1;
		RBound = log(B2 / d_pow23_all[0][b]) / log(2);

		if (LBound < 0 || RBound < 0)
			break;
		if (LBound == RBound)
		{
			int a = RBound;
			int i = 0;
			int b_temp = b;
			myBigInt<INTS> t = n;
			int s = 1;
			while (!t.iszero())
			{
				// 计算alpha,beta
				double dbl_t = t.to_double();
				int alpha = a, beta = b_temp;
				double logt = log(dbl_t) / log(2);
				double log3 = log(3) / log(2);
				for (int j = b_temp; j >= max(0, b_temp - 6); j--)
				{
					int alpha_j;
					if (d_pow23_all[0][j] >= dbl_t)
						alpha_j = 0;
					else
					{
						int k_j = int(logt - j * log3);
						if (k_j >= a)
							alpha_j = a;

						else
						{
							if (fabs(dbl_t - d_pow23_all[k_j][j]) <= fabs(d_pow23_all[k_j + 1][j] - dbl_t))
								alpha_j = k_j;
							else
								alpha_j = k_j + 1;
						}
					}

					if (fabs(dbl_t - d_pow23_all[alpha_j][j]) <= fabs(d_pow23_all[alpha][beta] - dbl_t))
					{
						alpha = alpha_j;
						beta = j;
					}
				}

				int stmp = s;
				if (!(t >= pow23_all[alpha][beta]))
					s = -s;

				DBC_store[DBC_index][i][0] = stmp;
				DBC_store[DBC_index][i][1] = alpha;
				DBC_store[DBC_index][i][2] = beta;
				i++;

				if (t >= pow23_all[alpha][beta])
					t = t - pow23_all[alpha][beta];
				else
					t = pow23_all[alpha][beta] - t;

				a = alpha;
				b_temp = beta;
			}
			DBC_len[DBC_index] = i;
			int temp0 = DBC_len[0] * ADD_COST + DBC_store[0][0][1] * DBL_COST + DBC_store[0][0][2] * TPL_COST;
			int temp1 = DBC_len[1] * ADD_COST + DBC_store[1][0][1] * DBL_COST + DBC_store[1][0][2] * TPL_COST;
			if (temp0 < temp1)
				DBC_index = 1;
			else
				DBC_index = 0;
			count_DBC++;
			if (count_DBC > dbc_coef)
				break;
		}
	}
	int min_index = 1 - DBC_index;
	return min_index;
}
