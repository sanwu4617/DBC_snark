//
// Created by occul on 2021/10/17.
//
#include<stdio.h>
#include<sys/time.h>
#include<random>
#include <cstring>
#include <vector>
#include "gpuec256.h"
#include "cuda_common.h"
using namespace std;

const int N_BIGNUM = 1 << 20; // maxsize = 2^15, for not run out of memory.
const int BATCHSIZE = 1 << 20; // 
const int N_POINT = BATCHSIZE;
const int N_THREAD_PER_BLOCK = 256;
const int N_BLOCK = ((BATCHSIZE+N_THREAD_PER_BLOCK-1)/N_THREAD_PER_BLOCK);

const UINT64 h_R2[4]={0x000007a2000e90a1L,0x1L,0x0L,0x0L};

const UINT64 h_Gx[4]={0x59F2815B16F81798L,0x029BFCDB2DCE28D9L,0x55A06295CE870B07L,0x79BE667EF9DCBBACL};
const UINT64 h_Gy[4]={0x9C47D08FFB10D4B8L,0xFD17B448A6855419L,0x5DA4FBFC0E1108A8L,0x483ADA7726A3C465L};

const UINT64 testGx[4]={0x252931db128244c9L,0x80ec2e92027d7e6eL,0x32c5ee6d51cb1e89L,0xb89bd74c7352f570L};
const UINT64 testGy[4]={0xd8cbce4f20d0d9e4L,0x5b636389add7cc6eL,0xccd07463f61e7fbeL,0x13fae72c0d3c849bL};
const UINT64 testGz[4]={0xbc5c645f1b1c297dL,0x0ba1469cd0bdd88aL,0x40bad30e143dcdceL,0x4bba49beb75cce43L};

Jpoint testG = {{0x252931db128244c9L,0x80ec2e92027d7e6eL,0x32c5ee6d51cb1e89L,0xb89bd74c7352f570L}, {0xd8cbce4f20d0d9e4L,0x5b636389add7cc6eL,0xccd07463f61e7fbeL,0x13fae72c0d3c849bL}, {0xbc5c645f1b1c297dL,0x0ba1469cd0bdd88aL,0x40bad30e143dcdceL,0x4bba49beb75cce43L}};

const int MAXPOINTS = 2 << 15;

//#define PRECOMPUTE // precompute test.
#define CUDA_VISIBLE_DEVICES 1

// 32 dbcs for test. to long dbc are very slow to compile.
const int SMALL_DBC_NUM = 32;
vector< vector<int> > rawDBC[130] = {
        {{-1,0,1},{1,8,2},{-1,10,5},{-1,13,5},{1,17,5},{-1,21,5},{-1,26,6},{-1,30,6},{1,34,6},{1,36,6},{1,39,6},{1,47,6},{-1,52,6},{1,59,6},{-1,66,6},{-1,67,6},{-1,70,6},{-1,75,6},{-1,76,6},{-1,78,6},{-1,82,6},{-1,84,6},{-1,88,6},{-1,94,6},{1,100,6},{-1,103,6},{-1,111,6},{-1,114,6},{-1,115,6},{1,121,6},{-1,124,6},{-1,128,6},{-1,129,6},{1,133,6},{-1,138,6},{1,141,6},{1,146,6},{1,148,6},{-1,153,6},{1,155,6},{-1,158,6},{1,161,6},{-1,164,6},{-1,175,6},{-1,180,6},{1,187,7},{1,193,7},{1,196,8},{1,199,8},{-1,205,8},{-1,212,8},{-1,214,8},{-1,220,8},{1,222,8},{1,224,8},{-1,227,8},{1,230,8},{1,232,8},{1,234,9},{1,239,9},{1,241,9}},
        {{1,0,0},{1,3,0},{1,6,0},{-1,12,0},{1,14,0},{-1,18,0},{-1,21,0},{1,26,0},{1,35,0},{1,37,0},{1,48,0},{1,50,0},{-1,53,0},{-1,55,0},{1,59,0},{-1,62,0},{-1,64,0},{-1,68,0},{-1,70,0},{1,75,0},{-1,79,0},{-1,80,0},{-1,82,0},{-1,89,0},{1,92,0},{1,94,0},{1,97,0},{-1,102,0},{-1,105,0},{-1,109,0},{-1,112,0},{-1,113,0},{-1,119,0},{-1,121,0},{-1,123,0},{-1,124,0},{-1,127,0},{1,131,0},{1,133,0},{-1,142,0},{-1,145,0},{1,147,0},{-1,159,0},{-1,161,0},{-1,164,0},{1,166,1},{1,171,1},{-1,175,1},{-1,177,1},{-1,181,2},{-1,184,2},{-1,188,2},{-1,199,2},{-1,204,2},{-1,209,2},{1,213,2},{1,217,3},{1,221,3},{1,222,5},{-1,229,5},{-1,231,5},{1,246,5},{1,247,5}},
        {{-1,1,0},{-1,3,0},{-1,8,0},{-1,10,0},{1,12,0},{-1,18,0},{-1,22,0},{-1,25,0},{-1,27,0},{-1,28,0},{-1,33,0},{-1,35,0},{-1,36,0},{1,41,0},{1,45,0},{1,50,0},{1,52,0},{1,57,0},{1,60,0},{-1,63,0},{1,65,0},{1,67,0},{-1,70,0},{-1,71,0},{1,77,0},{-1,82,0},{-1,84,0},{-1,86,0},{1,88,0},{1,98,0},{-1,101,0},{-1,102,0},{-1,106,0},{-1,109,0},{-1,111,0},{-1,112,0},{-1,116,0},{1,119,0},{1,122,0},{-1,125,0},{-1,127,0},{-1,130,0},{-1,131,0},{-1,138,0},{-1,141,0},{-1,144,0},{-1,147,0},{-1,151,0},{-1,153,0},{1,158,0},{1,161,0},{1,163,0},{1,173,0},{1,175,0},{1,179,1},{1,182,1},{-1,185,1},{1,188,2},{1,195,2},{1,206,3},{1,213,3},{1,217,4},{1,222,4},{1,227,4},{1,230,5},{1,233,6},{1,236,6},{1,245,6}},
        {{-1,1,0},{-1,3,0},{1,6,0},{1,8,0},{-1,12,1},{1,17,1},{-1,20,2},{1,24,2},{-1,28,2},{-1,29,2},{-1,33,2},{1,35,2},{-1,40,2},{-1,43,2},{-1,47,2},{-1,49,2},{-1,53,2},{1,55,2},{1,57,2},{1,60,2},{1,62,2},{-1,66,2},{1,68,2},{1,74,2},{1,79,2},{-1,83,2},{1,88,2},{-1,92,2},{1,94,2},{-1,97,2},{-1,98,2},{-1,100,2},{-1,103,2},{-1,104,2},{-1,107,2},{1,109,2},{1,113,2},{1,115,2},{-1,118,2},{-1,125,2},{-1,126,2},{1,129,2},{1,132,2},{1,138,2},{-1,141,2},{-1,146,2},{-1,147,2},{-1,150,2},{1,152,2},{1,157,2},{-1,163,2},{-1,169,2},{1,172,2},{1,174,2},{1,178,2},{-1,182,2},{1,184,2},{1,186,2},{1,189,2},{1,192,2},{1,196,2},{1,201,2},{1,212,2},{1,214,2},{-1,220,2},{-1,223,2},{-1,224,2},{1,231,2},{-1,233,3},{-1,238,3},{-1,241,3},{1,247,3},{1,251,3}},
        {{1,1,0},{1,5,2},{-1,13,2},{-1,17,2},{1,19,2},{-1,25,2},{1,29,3},{-1,35,3},{-1,40,4},{-1,43,5},{-1,50,5},{-1,52,5},{1,56,5},{1,61,5},{1,63,5},{-1,66,5},{-1,70,5},{1,72,6},{-1,76,6},{-1,78,6},{1,82,7},{-1,87,8},{-1,93,8},{-1,96,8},{-1,101,9},{1,104,9},{1,107,9},{1,109,9},{-1,114,9},{-1,115,9},{-1,120,9},{1,126,9},{1,129,9},{-1,134,9},{1,138,9},{-1,144,9},{-1,145,9},{-1,148,9},{-1,151,9},{-1,154,9},{1,157,9},{-1,161,9},{-1,170,9},{1,172,9},{1,179,9},{-1,182,9},{-1,188,9},{-1,194,9},{-1,198,9},{-1,200,9},{-1,204,9},{1,209,9},{1,211,10},{1,215,10},{1,218,10},{-1,223,10},{-1,227,10},{1,236,10},{1,240,10}},
        {{-1,0,0},{1,2,0},{1,7,0},{-1,12,1},{-1,17,1},{-1,18,1},{1,22,1},{-1,26,1},{1,28,1},{1,33,1},{-1,36,1},{-1,40,1},{-1,42,1},{-1,43,1},{-1,46,1},{1,48,1},{1,51,1},{-1,57,1},{1,62,1},{1,65,1},{-1,68,1},{1,71,1},{1,73,2},{1,77,2},{1,79,2},{-1,83,2},{-1,85,2},{1,89,2},{-1,93,2},{-1,97,2},{-1,101,2},{1,103,2},{-1,107,2},{1,114,2},{1,117,2},{-1,121,3},{-1,125,3},{1,129,3},{-1,131,4},{-1,134,4},{1,140,4},{1,142,5},{-1,145,5},{1,147,5},{-1,151,5},{-1,153,5},{-1,154,5},{1,159,5},{-1,168,5},{-1,169,5},{1,174,5},{-1,177,5},{1,179,5},{1,181,5},{-1,186,5},{-1,188,5},{-1,191,6},{-1,195,6},{-1,197,6},{-1,200,6},{-1,203,7},{1,207,7},{1,214,7},{1,217,7},{1,219,7},{1,223,7},{-1,226,7},{1,233,7},{1,235,7},{-1,239,7},{-1,241,7},{1,245,7}},
        {{1,0,0},{1,3,0},{1,6,0},{-1,11,0},{-1,12,0},{1,16,0},{1,18,0},{1,20,0},{-1,24,0},{-1,33,0},{1,36,0},{-1,39,0},{-1,40,0},{-1,42,0},{-1,47,0},{-1,48,0},{-1,57,0},{-1,59,0},{1,63,0},{1,65,0},{1,67,0},{1,72,0},{-1,75,0},{-1,79,0},{1,81,1},{-1,86,1},{-1,87,1},{-1,92,1},{-1,93,1},{1,97,1},{-1,100,1},{-1,102,1},{-1,103,1},{-1,106,1},{-1,107,1},{1,110,1},{-1,113,1},{-1,115,1},{-1,119,1},{1,126,1},{-1,132,1},{-1,133,1},{1,141,1},{1,144,1},{-1,148,1},{-1,149,1},{1,153,1},{1,157,1},{-1,160,1},{1,162,1},{1,164,1},{-1,167,1},{-1,170,1},{-1,175,1},{1,177,1},{-1,180,1},{-1,183,1},{-1,190,1},{-1,194,1},{-1,195,1},{-1,201,1},{-1,211,1},{1,213,1},{1,218,1},{1,220,1},{-1,223,2},{-1,226,2},{1,229,3},{-1,235,3},{-1,236,3},{-1,240,3},{-1,242,3},{-1,248,3},{1,251,3}},
        {{-1,2,0},{1,5,0},{-1,11,0},{-1,12,0},{1,16,0},{1,19,0},{1,21,0},{1,23,0},{1,25,0},{1,27,0},{1,30,0},{-1,33,0},{-1,35,0},{-1,36,0},{-1,38,0},{-1,41,0},{-1,42,0},{-1,48,0},{-1,52,0},{1,56,0},{-1,59,0},{1,61,0},{1,64,0},{-1,71,0},{-1,72,0},{-1,76,0},{-1,77,0},{1,83,0},{-1,85,1},{-1,88,1},{1,92,1},{1,94,1},{-1,102,1},{-1,103,1},{1,108,1},{1,110,1},{-1,113,1},{1,115,1},{1,119,1},{-1,123,1},{-1,129,1},{-1,133,1},{-1,134,1},{1,137,1},{1,140,1},{-1,146,1},{-1,148,1},{-1,150,1},{1,154,1},{1,157,1},{1,162,1},{-1,165,1},{1,171,1},{-1,174,1},{-1,175,1},{-1,186,1},{1,189,1},{-1,192,1},{-1,194,1},{-1,196,1},{-1,199,1},{1,201,2},{-1,207,2},{-1,209,2},{1,212,2},{1,215,2},{-1,218,2},{1,222,2},{1,227,2},{-1,232,3},{1,237,3},{-1,242,3},{-1,243,3},{1,250,3}},
        {{1,0,0},{1,3,0},{-1,9,0},{1,12,0},{-1,14,1},{-1,17,1},{-1,21,1},{-1,25,1},{1,30,2},{-1,33,2},{1,36,2},{1,39,2},{-1,45,2},{1,47,2},{-1,50,2},{-1,52,2},{-1,53,2},{-1,56,2},{1,62,2},{1,65,2},{-1,69,2},{-1,72,3},{1,74,5},{1,78,5},{1,81,5},{-1,87,5},{-1,91,5},{-1,102,5},{-1,105,5},{1,107,5},{-1,111,5},{-1,113,5},{-1,115,5},{1,117,5},{-1,126,5},{-1,130,5},{1,133,5},{-1,140,5},{-1,143,6},{-1,146,6},{-1,147,6},{1,150,6},{-1,154,6},{1,159,6},{-1,164,7},{-1,167,7},{-1,168,7},{1,171,7},{1,174,7},{-1,178,7},{-1,182,7},{1,185,7},{-1,188,7},{1,190,7},{1,196,7},{1,202,7},{1,206,9},{1,211,9},{1,213,9},{1,216,9},{1,223,9},{1,226,9},{-1,229,9},{-1,233,10},{1,237,10}},
        {{-1,0,1},{-1,4,1},{-1,5,1},{-1,10,1},{-1,13,2},{1,17,2},{-1,21,2},{-1,23,2},{1,25,2},{1,27,2},{1,31,2},{1,36,3},{1,41,3},{-1,45,3},{-1,47,3},{1,50,5},{1,58,5},{1,60,5},{-1,64,5},{-1,68,5},{-1,70,5},{-1,71,5},{1,77,5},{-1,83,5},{1,86,5},{1,88,5},{1,96,5},{-1,103,5},{-1,107,5},{-1,108,5},{-1,114,5},{1,117,5},{-1,123,5},{-1,127,5},{1,129,5},{1,133,5},{-1,137,5},{-1,144,5},{-1,147,5},{-1,149,5},{1,151,6},{1,156,7},{1,161,7},{1,164,7},{1,167,7},{1,169,7},{-1,172,7},{-1,175,7},{-1,176,7},{-1,181,7},{-1,184,7},{-1,188,7},{-1,190,7},{-1,191,7},{-1,198,7},{-1,201,7},{1,205,7},{1,209,8},{-1,212,9},{-1,216,9},{-1,220,9},{-1,222,9},{-1,226,9},{-1,228,9},{-1,229,9},{1,239,9}},
        {{1,0,0},{-1,3,0},{1,8,0},{-1,11,0},{1,13,1},{1,16,2},{1,20,2},{-1,23,2},{1,25,2},{1,31,2},{-1,34,2},{-1,35,2},{1,38,2},{1,40,2},{1,46,3},{1,49,3},{-1,58,3},{-1,64,3},{1,66,5},{-1,70,6},{-1,77,6},{1,80,6},{1,83,6},{-1,87,6},{-1,88,6},{-1,93,6},{-1,95,6},{1,97,7},{1,100,9},{1,103,9},{1,106,9},{-1,110,9},{-1,113,9},{1,122,9},{1,125,9},{-1,128,9},{-1,129,9},{-1,132,9},{1,135,9},{-1,140,9},{-1,143,9},{-1,147,9},{-1,148,9},{-1,151,9},{-1,157,9},{1,160,9},{1,163,9},{-1,166,9},{-1,168,9},{-1,169,9},{-1,172,9},{-1,173,9},{-1,176,9},{1,179,9},{-1,185,9},{-1,187,9},{1,190,9},{1,195,9},{1,198,9},{1,201,9},{-1,203,10},{1,211,10},{-1,215,10},{-1,216,10},{1,219,10},{1,221,10},{-1,227,10},{-1,229,10},{1,235,10},{1,237,10},{1,238,10}},
        {{-1,5,0},{-1,6,0},{1,9,0},{1,11,0},{-1,20,1},{-1,24,1},{-1,27,1},{1,34,1},{1,39,1},{-1,42,1},{1,45,1},{1,47,2},{-1,53,2},{-1,61,3},{1,65,4},{1,69,4},{-1,72,4},{-1,73,4},{1,77,4},{1,79,4},{1,82,4},{1,85,4},{1,95,4},{1,97,4},{-1,100,4},{1,103,4},{1,106,4},{-1,111,4},{-1,115,4},{-1,116,4},{-1,120,4},{-1,121,4},{-1,128,4},{-1,130,4},{1,132,4},{1,134,4},{1,138,4},{1,142,5},{-1,146,5},{-1,148,5},{1,151,6},{-1,159,6},{-1,160,6},{-1,163,6},{-1,167,6},{-1,168,6},{1,173,6},{1,176,6},{-1,185,6},{-1,189,6},{-1,192,6},{1,197,6},{1,203,6},{-1,206,6},{-1,209,6},{-1,213,6},{1,217,6},{-1,220,6},{-1,226,6},{-1,228,6},{1,229,9},{1,233,9},{-1,236,9},{1,241,9}},
        {{-1,0,0},{1,3,0},{1,6,0},{1,8,0},{-1,11,0},{1,14,0},{1,19,0},{-1,23,0},{-1,24,0},{-1,28,0},{-1,30,0},{1,35,0},{1,38,0},{-1,40,1},{-1,43,1},{1,47,1},{1,51,1},{-1,54,2},{-1,58,2},{1,65,2},{1,70,2},{-1,72,3},{-1,78,3},{1,82,3},{1,87,3},{-1,90,3},{-1,94,3},{-1,98,3},{-1,99,3},{1,109,3},{1,115,4},{1,126,4},{1,131,4},{1,135,4},{1,137,4},{1,139,5},{1,143,5},{-1,149,5},{-1,151,5},{-1,152,5},{-1,157,5},{-1,161,5},{-1,167,5},{-1,171,5},{-1,173,6},{-1,180,6},{1,182,6},{-1,185,6},{1,189,6},{-1,192,6},{1,194,6},{-1,197,6},{-1,198,6},{1,201,6},{1,203,6},{-1,208,6},{-1,211,6},{-1,213,6},{-1,218,7},{-1,221,7},{-1,224,7},{-1,229,7},{-1,231,7},{-1,234,7},{-1,242,7},{1,245,7}},
        {{1,0,0},{1,5,0},{1,11,0},{1,13,0},{1,15,0},{-1,18,0},{1,20,0},{-1,23,0},{-1,28,0},{1,30,0},{-1,39,0},{1,41,0},{-1,46,0},{1,49,0},{1,51,0},{-1,55,0},{-1,56,0},{1,59,0},{1,62,0},{-1,65,0},{1,67,0},{1,70,0},{1,74,0},{-1,77,1},{1,82,1},{-1,85,1},{1,87,1},{1,89,1},{-1,101,1},{-1,104,1},{-1,109,1},{1,111,1},{-1,116,1},{-1,117,1},{1,120,1},{-1,124,1},{-1,125,1},{-1,128,1},{-1,129,1},{1,138,1},{-1,141,1},{-1,144,1},{-1,146,2},{1,149,2},{1,151,2},{-1,154,2},{-1,157,2},{1,159,2},{-1,162,2},{-1,166,2},{1,168,2},{-1,172,2},{-1,173,2},{1,178,2},{-1,190,2},{1,192,3},{-1,196,3},{-1,198,3},{-1,199,3},{-1,203,3},{-1,205,3},{1,209,3},{-1,213,3},{-1,219,4},{-1,223,4},{1,226,4},{1,230,4},{1,232,4},{1,235,4},{1,238,5},{1,241,6},{1,246,6}},
        {{-1,3,0},{-1,4,0},{1,7,0},{-1,10,0},{1,12,0},{-1,16,0},{-1,18,1},{1,23,1},{-1,29,1},{-1,32,1},{1,35,1},{-1,38,1},{-1,41,1},{-1,44,1},{-1,48,1},{-1,49,1},{-1,52,1},{-1,54,1},{-1,58,1},{-1,60,1},{1,62,1},{-1,67,1},{-1,70,1},{-1,72,1},{-1,76,1},{-1,82,1},{-1,83,1},{-1,85,1},{-1,88,1},{-1,89,1},{-1,93,1},{-1,97,1},{-1,100,1},{-1,103,1},{-1,104,1},{-1,108,1},{-1,111,1},{-1,123,1},{-1,125,1},{-1,130,1},{-1,132,1},{-1,135,1},{-1,141,1},{-1,146,1},{-1,148,1},{1,153,2},{-1,156,2},{1,164,2},{1,168,4},{1,171,4},{-1,177,4},{1,179,4},{1,181,4},{-1,190,4},{-1,194,4},{-1,197,4},{-1,198,4},{-1,201,4},{-1,203,5},{-1,207,5},{1,212,5},{1,215,5},{1,217,5},{-1,221,6},{-1,224,6},{-1,227,6},{-1,230,6},{-1,233,6},{-1,236,6},{-1,239,6},{-1,242,6},{1,246,6}},
        {{-1,1,0},{-1,4,0},{-1,8,0},{1,11,0},{1,13,1},{1,18,1},{-1,22,1},{-1,26,1},{-1,29,2},{-1,34,2},{1,36,2},{-1,40,2},{-1,42,2},{-1,43,2},{-1,47,2},{1,49,2},{-1,59,2},{1,61,2},{1,64,2},{1,68,2},{1,70,3},{-1,76,3},{-1,77,3},{-1,81,3},{-1,82,3},{1,86,3},{1,88,4},{-1,93,4},{-1,96,4},{-1,97,4},{1,101,4},{1,105,4},{1,111,4},{1,119,4},{-1,125,4},{1,127,4},{1,130,4},{-1,134,4},{-1,137,4},{1,139,5},{-1,146,5},{1,148,6},{1,152,6},{-1,157,6},{-1,158,6},{1,163,6},{-1,168,6},{-1,170,6},{1,173,6},{-1,177,6},{-1,178,6},{-1,184,6},{1,188,6},{-1,192,6},{-1,194,6},{-1,199,6},{1,201,6},{1,204,6},{-1,207,6},{-1,211,6},{-1,213,6},{-1,215,6},{-1,219,6},{-1,222,6},{1,227,6},{1,229,6},{1,232,6},{1,238,7},{1,241,7},{1,242,7}},
        {{1,0,0},{1,1,2},{1,4,2},{1,9,2},{-1,13,2},{-1,18,2},{-1,24,2},{-1,26,2},{-1,30,2},{1,32,2},{1,38,2},{-1,42,2},{1,44,2},{1,48,2},{-1,51,3},{-1,54,3},{-1,60,3},{1,63,3},{-1,68,3},{-1,70,4},{-1,75,4},{-1,77,4},{-1,78,4},{1,83,4},{1,85,4},{-1,92,4},{-1,94,4},{1,97,4},{-1,101,4},{-1,103,4},{1,107,5},{-1,116,5},{-1,118,5},{1,123,5},{1,128,5},{1,129,7},{-1,134,7},{-1,136,7},{1,139,7},{1,141,7},{1,144,7},{-1,148,7},{1,150,7},{-1,155,7},{1,158,7},{1,161,8},{1,166,8},{-1,174,8},{-1,177,8},{1,181,8},{-1,190,8},{1,196,8},{-1,204,8},{1,206,8},{1,208,8},{-1,212,8},{-1,215,8},{1,217,8},{1,221,8},{-1,224,9},{-1,228,9},{1,233,10},{1,240,10}},
        {{1,2,1},{-1,7,1},{-1,10,1},{-1,12,1},{-1,16,1},{-1,18,1},{-1,22,1},{1,27,1},{1,29,1},{1,35,1},{1,38,1},{1,44,1},{-1,47,1},{-1,52,1},{-1,53,1},{-1,57,1},{1,59,1},{1,61,1},{1,64,1},{1,68,1},{1,71,1},{1,73,1},{1,75,1},{-1,78,1},{-1,83,1},{-1,88,1},{-1,90,1},{-1,96,1},{-1,98,1},{-1,99,1},{-1,105,1},{-1,110,1},{1,113,2},{-1,116,2},{1,118,2},{1,120,2},{-1,128,2},{1,136,2},{1,138,3},{-1,141,3},{-1,143,3},{-1,146,4},{1,152,4},{-1,155,4},{1,161,4},{1,164,4},{-1,168,5},{1,171,5},{1,174,5},{-1,181,5},{-1,183,5},{-1,188,6},{-1,192,6},{-1,194,6},{-1,199,6},{-1,208,6},{1,212,6},{-1,215,6},{-1,216,6},{-1,220,6},{-1,225,6},{-1,230,6},{-1,233,6},{1,235,6},{-1,238,6},{-1,240,6},{1,242,6},{1,244,6},{1,246,6}},
        {{-1,0,0},{-1,2,0},{1,4,0},{-1,7,0},{-1,10,0},{-1,13,0},{1,17,0},{-1,20,0},{-1,22,1},{-1,26,1},{-1,31,1},{-1,33,1},{-1,37,1},{-1,39,1},{-1,40,1},{-1,42,1},{-1,45,1},{1,52,1},{-1,55,1},{-1,57,1},{1,59,1},{-1,62,1},{1,64,1},{1,66,1},{1,69,1},{-1,74,1},{-1,75,1},{-1,81,1},{-1,85,1},{1,89,1},{1,91,2},{1,96,2},{1,100,2},{-1,105,2},{1,112,2},{1,114,2},{1,118,2},{1,121,2},{-1,124,2},{-1,125,2},{-1,127,2},{-1,129,2},{1,132,2},{-1,137,2},{-1,138,2},{-1,141,2},{1,144,2},{1,146,2},{-1,155,2},{1,158,2},{1,166,2},{-1,169,2},{-1,171,2},{1,176,2},{1,178,2},{-1,183,2},{-1,185,2},{-1,188,2},{-1,190,2},{-1,192,2},{1,195,2},{-1,200,2},{1,203,2},{1,205,2},{-1,208,2},{1,211,2},{-1,217,2},{-1,219,2},{-1,225,2},{-1,229,2},{-1,230,2},{-1,233,2},{-1,245,2},{-1,249,2},{1,251,2},{1,252,2}},
        {{1,1,0},{-1,5,0},{-1,7,0},{-1,8,0},{-1,10,0},{-1,16,0},{1,19,1},{1,22,1},{-1,25,1},{1,29,1},{1,32,1},{-1,35,1},{-1,44,1},{-1,45,1},{-1,48,1},{-1,51,1},{-1,53,1},{-1,54,1},{1,57,1},{-1,65,1},{-1,67,2},{1,71,2},{1,75,2},{1,78,3},{-1,81,3},{-1,84,3},{1,93,3},{1,96,3},{1,99,3},{-1,102,3},{1,104,3},{1,109,3},{-1,113,3},{-1,114,3},{-1,119,3},{-1,122,3},{1,124,3},{-1,128,3},{-1,129,3},{-1,133,3},{1,135,4},{1,140,5},{1,142,7},{-1,148,7},{-1,150,7},{-1,160,8},{-1,161,10},{1,165,10},{1,170,10},{-1,173,10},{-1,174,10},{1,178,10},{1,182,10},{1,185,10},{-1,189,10},{-1,194,10},{1,196,10},{1,199,10},{-1,203,10},{1,210,10},{1,212,10},{1,214,10},{1,219,10},{1,225,10},{-1,229,10},{-1,230,10},{-1,234,10},{1,237,10},{1,240,10}},
        {{-1,0,0},{-1,1,0},{-1,4,0},{1,6,0},{1,9,0},{1,14,0},{1,16,0},{1,23,0},{1,37,0},{-1,41,1},{-1,44,1},{-1,46,2},{-1,49,2},{1,53,2},{1,56,2},{-1,63,2},{-1,64,2},{-1,68,2},{1,70,2},{-1,74,2},{-1,75,2},{-1,84,2},{1,87,2},{1,89,4},{-1,93,5},{-1,96,6},{-1,100,6},{-1,102,6},{-1,106,6},{1,108,6},{1,113,6},{-1,116,6},{-1,118,7},{-1,123,7},{-1,126,7},{1,128,7},{-1,135,7},{-1,138,7},{1,143,7},{1,147,7},{1,149,7},{-1,152,7},{1,155,7},{1,157,7},{-1,160,7},{-1,162,7},{1,171,7},{-1,177,7},{-1,180,7},{1,183,7},{1,187,7},{1,191,7},{1,193,7},{1,195,7},{-1,199,7},{-1,205,7},{1,208,7},{-1,213,7},{-1,216,7},{-1,218,7},{-1,221,7},{1,223,7},{-1,227,7},{1,229,8},{1,234,8},{1,236,8},{1,237,8}},
        {{1,0,0},{1,8,0},{-1,11,0},{-1,14,1},{-1,19,1},{-1,22,1},{1,29,1},{1,31,1},{-1,35,1},{-1,40,1},{-1,41,1},{-1,46,1},{1,52,1},{1,54,2},{1,58,3},{-1,61,3},{-1,65,3},{1,68,3},{1,70,4},{-1,73,4},{1,75,5},{1,82,5},{1,84,6},{1,89,6},{-1,92,6},{-1,93,6},{-1,96,6},{-1,100,6},{-1,105,6},{-1,106,6},{-1,112,6},{-1,115,6},{-1,119,6},{-1,121,6},{1,125,6},{-1,129,6},{1,131,6},{1,137,6},{1,140,6},{1,142,6},{1,148,7},{1,151,7},{-1,155,7},{1,157,7},{1,159,7},{-1,163,7},{-1,166,7},{1,171,7},{-1,177,8},{1,182,8},{1,190,8},{-1,193,8},{-1,194,8},{1,197,8},{1,199,8},{-1,202,8},{1,204,8},{-1,213,8},{1,216,8},{1,218,9},{-1,221,9},{1,225,9},{-1,228,9},{1,231,9},{1,238,9},{1,240,9},{1,241,9}},
        {{-1,0,0},{-1,7,0},{-1,8,0},{-1,10,0},{1,15,0},{-1,17,1},{-1,21,1},{-1,26,2},{1,32,2},{-1,36,2},{-1,39,2},{-1,40,2},{1,43,2},{1,47,2},{1,49,3},{-1,54,3},{-1,58,3},{-1,61,3},{1,64,3},{-1,67,3},{-1,69,3},{1,73,3},{-1,76,3},{-1,77,3},{-1,79,3},{1,87,3},{1,89,3},{-1,95,3},{-1,103,3},{-1,104,3},{-1,109,3},{-1,111,3},{-1,117,3},{1,122,4},{1,126,4},{1,131,4},{-1,135,4},{1,137,4},{-1,141,4},{1,143,4},{1,145,4},{1,154,4},{1,156,4},{-1,159,4},{-1,163,4},{-1,166,4},{1,168,4},{1,170,4},{-1,176,4},{1,179,4},{-1,182,4},{1,186,4},{1,189,4},{1,192,4},{1,194,4},{1,196,4},{1,200,4},{-1,204,4},{-1,206,4},{-1,210,6},{-1,214,6},{-1,215,6},{1,218,6},{-1,228,6},{1,231,6},{1,232,8},{1,239,8}},
        {{1,3,0},{1,5,0},{-1,11,0},{-1,12,0},{-1,14,0},{1,19,0},{-1,23,2},{-1,28,2},{-1,35,2},{-1,39,2},{1,42,2},{-1,46,2},{-1,51,2},{-1,52,2},{-1,56,2},{-1,59,2},{1,61,2},{1,63,2},{-1,67,2},{-1,68,2},{-1,70,2},{1,78,2},{1,81,3},{-1,87,3},{-1,90,3},{1,94,3},{-1,98,3},{-1,100,3},{1,103,4},{-1,106,4},{1,110,4},{1,112,4},{-1,116,4},{-1,120,4},{1,122,4},{-1,128,4},{-1,130,4},{-1,133,4},{-1,134,4},{-1,136,4},{1,140,4},{1,143,4},{1,146,4},{1,148,4},{1,157,4},{1,159,4},{-1,162,4},{-1,164,4},{1,169,5},{-1,174,5},{-1,182,5},{-1,184,5},{1,187,5},{-1,190,5},{-1,192,5},{1,196,5},{-1,200,5},{-1,201,5},{-1,203,5},{-1,205,5},{-1,209,5},{-1,216,5},{-1,219,5},{1,224,5},{1,227,5},{-1,230,5},{1,232,6},{-1,238,6},{-1,241,6},{1,246,6}},
        {{1,0,0},{1,2,0},{-1,8,0},{-1,10,0},{1,14,2},{-1,16,3},{-1,18,4},{-1,21,4},{-1,25,4},{-1,27,4},{1,38,4},{1,40,4},{-1,43,4},{-1,45,4},{1,55,4},{-1,58,4},{-1,60,4},{-1,62,4},{1,65,4},{1,68,4},{1,71,4},{-1,76,4},{-1,78,5},{-1,82,5},{-1,84,5},{-1,85,5},{-1,89,5},{1,91,5},{-1,96,5},{1,99,5},{1,104,5},{1,108,5},{1,112,5},{-1,115,5},{1,121,5},{-1,126,5},{-1,131,5},{-1,132,5},{-1,134,5},{-1,136,5},{1,142,5},{-1,150,5},{1,152,5},{-1,155,5},{-1,160,5},{-1,161,5},{-1,166,5},{1,169,5},{1,177,5},{1,179,5},{1,182,5},{-1,186,5},{1,188,5},{-1,191,5},{1,194,5},{1,196,5},{-1,201,5},{-1,203,6},{1,206,6},{-1,209,6},{-1,215,6},{1,230,6},{1,234,7},{1,238,7},{1,242,7},{1,243,7}},
        {{1,1,1},{1,7,1},{1,9,1},{-1,14,1},{1,16,1},{-1,21,1},{-1,24,1},{1,26,1},{1,29,1},{-1,32,1},{-1,34,1},{-1,37,1},{-1,38,1},{-1,43,1},{1,45,1},{1,47,1},{-1,50,1},{-1,52,1},{-1,53,1},{-1,55,1},{-1,58,1},{-1,61,1},{-1,66,1},{-1,69,1},{1,74,1},{-1,77,1},{-1,79,1},{1,81,1},{1,84,1},{1,89,1},{-1,95,2},{-1,99,2},{-1,106,2},{1,108,3},{1,113,4},{1,116,4},{1,119,4},{-1,129,4},{-1,131,4},{-1,136,4},{1,140,4},{-1,146,5},{-1,151,5},{-1,153,5},{-1,154,5},{-1,159,5},{-1,163,5},{-1,165,5},{-1,169,5},{1,171,5},{-1,174,5},{1,176,5},{-1,180,5},{-1,184,5},{-1,188,5},{-1,190,5},{-1,193,5},{-1,195,5},{-1,198,5},{1,200,5},{-1,205,5},{-1,207,5},{-1,211,5},{1,213,5},{1,215,5},{-1,217,6},{-1,221,6},{1,224,6},{1,235,6},{1,238,6},{1,246,6}},
        {{-1,0,0},{1,2,0},{-1,6,0},{-1,10,0},{1,12,0},{-1,19,0},{-1,22,0},{-1,25,0},{-1,26,0},{1,29,0},{1,31,0},{1,33,0},{1,37,0},{1,39,0},{1,41,0},{-1,44,0},{-1,45,0},{-1,48,0},{-1,53,0},{-1,55,0},{1,57,0},{1,63,0},{1,65,0},{1,67,0},{1,69,0},{-1,75,0},{-1,78,0},{1,80,0},{-1,83,0},{1,87,1},{1,90,1},{1,95,1},{1,99,1},{-1,103,1},{-1,104,1},{-1,107,1},{1,112,1},{-1,115,1},{-1,118,1},{-1,121,1},{-1,126,1},{-1,128,1},{1,131,1},{1,133,1},{1,135,1},{1,137,1},{1,141,1},{1,143,1},{-1,147,1},{1,155,1},{-1,158,1},{-1,160,1},{-1,165,1},{-1,166,1},{-1,169,1},{-1,170,1},{-1,175,1},{-1,176,1},{-1,193,1},{-1,197,1},{1,199,1},{1,202,1},{-1,209,1},{-1,210,1},{1,213,1},{-1,216,1},{-1,219,1},{-1,220,1},{-1,229,1},{1,231,1},{-1,234,1},{-1,239,1},{-1,245,1},{-1,248,1},{1,253,1}},
        {{-1,0,0},{-1,4,0},{-1,6,0},{-1,12,0},{1,14,0},{-1,17,0},{-1,18,0},{1,23,0},{1,26,0},{-1,29,0},{-1,32,0},{1,34,0},{1,36,0},{-1,40,0},{-1,41,0},{-1,45,0},{-1,51,0},{-1,55,0},{1,57,0},{-1,61,0},{1,63,0},{-1,66,0},{-1,67,0},{-1,75,0},{-1,80,1},{1,84,1},{1,86,1},{-1,89,1},{-1,92,1},{-1,94,1},{-1,100,1},{-1,102,1},{-1,103,1},{1,110,1},{-1,113,1},{-1,114,1},{-1,118,1},{1,121,1},{1,126,1},{-1,135,1},{-1,140,1},{1,145,1},{-1,149,1},{1,151,1},{1,156,1},{1,157,4},{-1,164,5},{-1,167,5},{-1,168,5},{1,171,5},{-1,176,5},{1,184,5},{1,186,5},{-1,189,5},{-1,192,5},{-1,197,5},{-1,202,5},{-1,205,5},{-1,209,5},{-1,211,6},{-1,218,6},{-1,222,6},{-1,226,6},{-1,229,6},{-1,233,6},{-1,236,6},{-1,238,6},{-1,242,6},{1,245,6}},
        {{1,1,0},{-1,4,0},{-1,6,0},{-1,10,0},{-1,12,0},{-1,13,0},{-1,16,0},{-1,17,0},{-1,20,0},{-1,22,0},{-1,23,0},{1,26,0},{-1,35,0},{1,38,0},{1,42,0},{1,44,0},{-1,49,0},{-1,52,0},{-1,57,0},{-1,60,0},{-1,63,0},{-1,66,0},{-1,70,0},{-1,72,0},{-1,73,0},{1,76,0},{1,78,0},{1,84,0},{-1,87,0},{-1,94,0},{-1,96,0},{-1,98,0},{-1,101,0},{-1,102,0},{-1,104,0},{-1,110,0},{-1,120,0},{1,123,1},{-1,126,1},{-1,133,1},{-1,137,1},{1,142,1},{-1,145,1},{-1,152,1},{1,159,1},{-1,162,1},{1,165,1},{1,168,1},{-1,172,2},{1,178,2},{1,185,2},{1,187,3},{-1,191,3},{-1,195,3},{-1,197,3},{1,199,3},{1,202,3},{-1,205,3},{-1,206,3},{-1,211,3},{-1,212,3},{1,224,3},{-1,229,3},{-1,230,3},{-1,237,3},{1,240,5},{1,244,5},{1,246,5}},
        {{1,0,0},{1,2,0},{-1,5,0},{-1,7,0},{-1,9,0},{1,15,0},{1,20,1},{1,22,2},{1,25,2},{-1,29,2},{-1,30,2},{-1,35,2},{1,37,2},{1,40,2},{1,43,2},{-1,47,2},{-1,49,2},{-1,51,2},{1,57,2},{1,59,3},{-1,63,4},{-1,66,5},{-1,71,5},{-1,72,5},{1,77,5},{-1,81,5},{-1,86,5},{-1,88,5},{-1,93,6},{-1,97,6},{-1,99,6},{-1,103,6},{-1,106,6},{-1,107,6},{-1,110,6},{1,116,6},{-1,119,6},{-1,121,6},{1,123,6},{-1,128,6},{1,133,6},{-1,136,6},{-1,138,7},{1,147,7},{-1,150,7},{1,155,7},{-1,160,7},{-1,162,7},{-1,164,8},{1,168,8},{-1,171,8},{-1,173,8},{-1,179,8},{1,187,8},{1,189,8},{-1,191,9},{-1,194,9},{-1,199,9},{-1,203,9},{-1,205,9},{-1,208,9},{-1,210,10},{1,218,10},{-1,221,10},{-1,224,10},{-1,226,10},{-1,232,10},{-1,233,10},{1,237,10}},
        {{1,1,0},{1,3,0},{1,7,0},{-1,10,1},{1,13,1},{-1,17,1},{1,20,1},{-1,23,1},{1,26,1},{-1,32,1},{1,35,1},{1,38,2},{-1,44,2},{1,48,2},{-1,51,2},{-1,56,2},{-1,59,2},{-1,62,2},{1,64,2},{1,66,2},{1,72,2},{-1,74,3},{1,78,3},{-1,81,3},{-1,83,3},{1,88,3},{1,92,3},{-1,95,3},{-1,96,3},{-1,98,3},{1,108,3},{1,112,3},{1,114,3},{-1,117,3},{1,123,3},{1,127,3},{-1,133,3},{-1,136,3},{-1,137,3},{1,145,3},{-1,149,3},{-1,151,3},{-1,153,4},{-1,156,5},{-1,158,6},{-1,162,6},{1,164,6},{1,171,6},{-1,174,8},{1,178,8},{1,180,8},{-1,183,9},{-1,188,9},{-1,192,9},{1,198,9},{1,201,9},{-1,205,9},{-1,209,9},{-1,211,9},{1,217,9},{1,219,9},{1,221,9},{1,224,9},{1,229,9},{1,238,9},{1,239,9}},
        {{-1,0,1},{1,4,2},{-1,11,3},{1,14,3},{1,19,3},{-1,23,3},{1,25,3},{-1,29,3},{1,32,3},{1,33,5},{-1,37,5},{-1,38,5},{1,43,5},{1,47,5},{-1,50,5},{-1,51,5},{-1,53,5},{1,58,5},{-1,64,5},{1,66,5},{-1,69,5},{1,71,5},{1,73,5},{1,75,5},{1,79,5},{1,83,5},{1,87,5},{1,90,5},{-1,93,5},{1,98,5},{1,102,5},{-1,105,6},{-1,109,6},{-1,111,7},{-1,119,7},{-1,126,7},{-1,129,7},{-1,131,7},{-1,134,7},{-1,135,7},{-1,138,7},{-1,144,7},{-1,146,7},{-1,147,7},{-1,152,7},{-1,155,7},{-1,159,7},{1,162,8},{1,166,8},{-1,169,8},{1,172,8},{1,175,8},{1,184,8},{-1,188,8},{-1,189,8},{-1,195,8},{-1,197,8},{-1,201,8},{1,205,8},{-1,210,8},{-1,212,8},{-1,217,8},{-1,221,8},{-1,223,8},{1,227,8},{1,230,8},{1,234,8},{1,241,8},{1,242,8}},
        {{-1,0,0},{1,2,0},{-1,6,0},{-1,8,0},{1,10,0},{-1,13,0},{1,15,0},{1,17,0},{1,19,0},{-1,23,0},{-1,28,0},{-1,31,0},{-1,34,0},{1,36,0},{1,40,0},{1,43,0},{-1,46,0},{-1,52,0},{1,54,0},{-1,57,0},{1,59,1},{1,63,1},{-1,67,1},{1,72,1},{-1,77,1},{1,80,1},{1,85,1},{1,89,1},{1,91,1},{-1,96,1},{-1,97,1},{-1,101,1},{-1,103,1},{-1,104,1},{-1,109,1},{-1,110,1},{-1,113,1},{-1,115,1},{-1,120,1},{-1,122,1},{-1,124,1},{1,128,1},{-1,133,1},{-1,139,1},{1,141,1},{-1,144,1},{-1,152,1},{-1,161,1},{1,163,1},{1,165,1},{-1,168,1},{1,171,1},{-1,174,1},{1,177,2},{-1,179,4},{1,185,4},{1,187,4},{-1,190,4},{-1,193,4},{-1,199,4},{-1,201,4},{-1,203,4},{-1,204,4},{-1,207,4},{1,212,4},{1,217,4},{1,224,4},{-1,231,4},{-1,233,4},{1,235,4},{1,239,4},{1,241,4},{1,245,4},{1,247,4},{1,249,4}},
        {{-1,13,0},{-1,15,0},{-1,24,0},{1,27,0},{1,32,0},{-1,36,0},{-1,38,0},{-1,39,0},{1,42,0},{1,44,0},{-1,47,0},{-1,50,0},{-1,52,0},{1,57,0},{1,63,0},{1,66,0},{-1,69,0},{-1,70,0},{-1,76,0},{-1,79,0},{1,81,0},{1,84,0},{-1,87,0},{-1,92,0},{-1,94,0},{-1,95,0},{-1,98,0},{-1,100,0},{-1,103,0},{-1,104,0},{1,107,0},{-1,111,0},{1,116,0},{1,122,0},{-1,125,0},{-1,126,0},{1,129,0},{1,132,0},{-1,136,0},{-1,144,0},{1,150,0},{-1,152,1},{-1,159,1},{-1,161,1},{1,165,1},{-1,171,1},{1,174,2},{-1,179,2},{-1,182,2},{-1,186,2},{1,188,4},{1,194,4},{1,197,4},{-1,202,4},{1,204,5},{-1,212,5},{-1,214,6},{1,217,6},{-1,220,7},{-1,225,7},{1,233,7},{-1,236,7},{1,240,7},{1,242,7}}
};

unsigned long long px[] = {0xc1291ea73f54ce04ll, 0xbaae63f186512829ll, 0x849ffc311521657all, 0xdb05b8be3bc3ea12ll, 0xec734eb90e60d146ll, 0x47e3a925f4c2f8d3ll, 0xe404a3c34bfc4331ll, 0xa09f73b213ee39abll, 0xdb13ac478ea2128ell, 0x2c53e4e8f64e797dll, 0x39b7a582468b2b26ll, 0x8a7cc04c32f86ce1ll, 0xcd358ec4bf05d09ell, 0x6b2044c68221ce4ll, 0x87a85903221d0748ll, 0x46f323835084b5a9ll, 0x46f97386edeaf803ll, 0xa49b5c87eb315db7ll, 0xe3081f1ad7d6d04all, 0x83059f0ea01a4aeell, 0xee6fba127fec7397ll, 0xaba6a4a20bad9c85ll, 0x7644585b6c958d2cll, 0x84938de81702b2a3ll, 0x1a3ad24da633218ell, 0xec8c6b7a2e2d7fd4ll, 0x5893289ae2b2d9bll, 0xe5ef285c943653aell, 0xa04bd5faef99b5cell, 0x978380dff860c313ll, 0xa993bd51570b133ell, 0xb6d827a6ffe8c506ll, 0xf3fc602ee2294187ll, 0x885972979b942caell, 0xfe36bc732ebf4a28ll, 0x44524be479e97992ll, 0xf46d14dc6fdec9fll, 0x8548cb4caa31b9d7ll, 0xeefb2bfedba2f870ll, 0xee2cf31377c30c02ll, 0x8abcb93f4f13ae56ll, 0x4b03bbfee680553ell, 0x17a359c48f5f772ell, 0x4b8590bc7ad10993ll, 0xd81ef93a1c4bc230ll, 0x3fe5e94a6137a639ll, 0xdf6937fecfe2ad57ll, 0x70c0b2bac6f886f1ll, 0x9f04236a79cf01f6ll, 0x13e1640167007df8ll, 0xf780f2e0d9a1ae0fll, 0xbf7d094c158291cfll, 0x212b875aa42d2b3cll, 0x446ebb199ab8c39fll, 0xdcaf114ec3d14cfdll, 0x2ba87b8b8d3f1f59ll, 0x9bcd364ea3325d90ll, 0x3a47a15979d76791ll, 0x587c8cc21bc825dell, 0x89c87f72dfc370fcll, 0xb0d283bbfa0e29b3ll, 0x26308aa1138b7509ll, 0xaf529fa55238314ll, 0x39816c256e503a7ell, 0x5f22c397ef9fe0all, 0xb9e5bdb683e15a95ll, 0xaaa3fb7ade2d4d88ll, 0x4d7e7ee5951e2398ll, 0x5470acdb8695857ll, 0x5166d1ad1ad03d79ll, 0xf3305c87d6eb6a66ll, 0xc176900a101104fll, 0xce06d34209f8948all, 0xd82193ffdfe2c9e5ll, 0x931075c79ce0d306ll, 0x775fb75a7642d179ll, 0x888cda266c2aad54ll, 0x40fc82795775f1fall, 0x497bad018e821b36ll, 0xa29b1ff55c8448c9ll, 0x69af3b5510579da2ll, 0x2f1fbea9ba3d7984ll, 0x774fd33a1752595cll, 0x56a3a84b5041c8ebll, 0x7cde84ea0461ba1cll, 0x603181bf3283c6d6ll, 0x62f2c535e53dcee8ll, 0x2451e9cc1fdf3d7ll, 0xda232c0afcdc6597ll, 0xeb4ba40875b6a4dall, 0x2d5f9584192f072bll, 0x3198177f0b01bcdcll, 0xacd3d97303bbd12cll, 0x8db5b517cbe942e0ll, 0x51d09eb6d2933d2ll, 0xe6d9c03b36990772ll, 0xb964889dbf78ebd5ll, 0xb9811d6fc0356d18ll, 0xa2410b8e143e5130ll, 0xcc38ce20d9807de7ll};

unsigned long long py[] = {0x8ceceeb28411ba32ll, 0x3e781792a382e71ell, 0xd3fa02dae181fc95ll, 0x2e304597764f60a6ll, 0xfce1486fcc18d692ll, 0x1375c5b6e87f2c3all, 0xb48702fc8a96ba27ll, 0x57e69125d0114f2cll, 0x362d1b3393fa7588ll, 0x78796df78872500dll, 0x9138dfc1bdc15a3dll, 0xa167f3d2414d0205ll, 0x1b9b9a5f34b8afecll, 0x583a0f67a99a3788ll, 0xc4acd28dffe1410cll, 0xf07e21417abbcc3cll, 0x3ade3c45dfbc863fll, 0x9eda6f139f31b018ll, 0xe0adb41adfca8622ll, 0x15ea15417084f16bll, 0xb3b2c55417193756ll, 0x13712c30fdc9e718ll, 0x2952caab2f05eab1ll, 0x358afc9cbd7e5192ll, 0xd536b8e7f4c507d6ll, 0x66c5a5ff171507e0ll, 0x725b2f3fb86bac7bll, 0x9e36795fd946b087ll, 0x357fcb8b68e5b458ll, 0x7766f17d2f3054d7ll, 0x8343812a93422063ll, 0xa1f100198fe5c71dll, 0x68620cb7296393a2ll, 0xd95ea31298a2c21dll, 0x77d391aa12784ca4ll, 0x8fcf1ba16eaf7c5bll, 0xc68cfe2925c1ac51ll, 0x2352bcdd153d436cll, 0xcfeeeb13fb787307ll, 0xac675e68a3bff56bll, 0xd621070cf7495c20ll, 0x31c021898ac69039ll, 0x8f0c823687669c4all, 0x144b3504c3329402ll, 0x10a0a577850a8ac9ll, 0x2a0026f19fabf26ll, 0x8b726c9485375803ll, 0xf2e492176f575e7ell, 0xbba9a542f2b6cf79ll, 0x117cb4563c3d2f96ll, 0x65b88205addecb52ll, 0x615c0a66a7d6a4dell, 0x35f4afe2701217e2ll, 0x15e4a785245be7e3ll, 0x2993bd9756922e8ell, 0x5c2ff49d4f54fda0ll, 0xa82c16071118f14fll, 0x800ca14fc42286e7ll, 0x1e5b6da6f7f886e3ll, 0x37997aecc99fc704ll, 0x6991710fc91f47e3ll, 0x9877646ac9334869ll, 0x61ac8c5c317aba27ll, 0x69b0ede62479a906ll, 0xf1d3bf52ace992d5ll, 0x1c9980570a29208all, 0x53784402059629d6ll, 0x9698f219e1c2443all, 0xf6f31dc5852bdbbbll, 0x261e0d1867a702f8ll, 0xd166e64d5d8829b9ll, 0xc77dd21b6cbdd1b6ll, 0xe69accceb5e2b4e9ll, 0x69baa5bbe515be9dll, 0xb616554bece011cdll, 0xa34be20aa7d9c90cll, 0x5e7cc1b8428e709cll, 0x5c58a6ac2c829e11ll, 0x9a3dce73b43a903ll, 0xa58d08ec4c58bd52ll, 0x7f7751124655e13ll, 0x5424aa4fdbf8b18dll, 0xc982cbae45ccce95ll, 0x9398e8c27258250dll, 0xf17129bfa5b1b510ll, 0x41fe283dfb4327afll, 0x5f2f33e7714c97dall, 0x559cf7242bb8fe8ell, 0x17b3a3bb46dd3e91ll, 0x1af7d0a9f1b04817ll, 0x6d23e0dd841a2672ll, 0x8f6d1a2693629455ll, 0xff20d2520292748dll, 0x24d2beca6756a36dll, 0x7644c94f54b6cb43ll, 0x8b5d5592833e959fll, 0xb0c016d4371e5f9ell, 0xa0acac44e0ca9561ll, 0x9d27f8c2c840e7ell, 0x73b4245bfb56fc89ll};

unsigned long long px3[] = {0x4d3c296b3e8b6988ll, 0xddcc9ca08396d1cbll, 0x7ad77e63364511dfll, 0xa0ac877d59fe43all, 0x4a87562b177eae72ll, 0xf52831b49c6a6112ll, 0xf0b0a46021a488d2ll, 0xd4575222d4cda88bll, 0x9fd2acb1e587292bll, 0xd8c007515b734f4ll, 0x86d785c545c96c0dll, 0x81b2826c2c4d2dd8ll, 0x94001024d35f4e03ll, 0xa7f67326231808c0ll, 0x49e61768c043f864ll, 0xa6bb07c8044cb754ll, 0x3bc5fce63b5c6eb7ll, 0xe975105a35c835b0ll, 0x5449ac7731bf26a6ll, 0x8bb21922e7870e9cll, 0xbf51fc11ed6b7becll, 0x90c2a7dd970b6a7all, 0x87b1d7c096ab0fd1ll, 0xef4efa6172ed7f00ll, 0x70bfa5991f8040b5ll, 0xf63d2f69ab92e571ll, 0x30f4f32599299452ll, 0xc55ac8e19c98b574ll, 0x1e7bd7e1f2a7f00all, 0x9bcc5a675c011ab3ll, 0x1b0ac2245d3f3e60ll, 0x6f91233e31a13e1cll, 0x15c3bbf222eb03b3ll, 0x39c2af9d552948efll, 0x51a6d8ded9469e3bll, 0x162d2cf1cfd90c8ell, 0xc3241eee21e04335ll, 0x1f7ef0ec35bb3a16ll, 0x2082ddcd712cea20ll, 0xea6dd878e1cf83bell, 0xe20708512d57af51ll, 0x53d8c5e73bfd68e7ll, 0xbc06c96708a2d80dll, 0xe5303f14e2c4ed2ll, 0xf2baa21ec43fbf3cll, 0xc66aaf40605089d8ll, 0xb98898d342d1a70all, 0x79eaa5df944cdcc3ll, 0xa4ae33d8a9392101ll, 0xd2bd0d1e685b2895ll, 0xf5dee131682af06all, 0xee9d971db32100a9ll, 0x979d6bc8cba8f21all, 0x627a73d284d1e077ll, 0x3791b8bed2f990ecll, 0xf1b664cf858bf41ll, 0x8bf00b84d5ef3043ll, 0x5290e9b8024f8d15ll, 0x586a32e199bc60afll, 0xb0011ca2bfc88320ll, 0xd246570ad39d881dll, 0xa8d58a8fb5195e07ll, 0x2d81c5167f40a226ll, 0x4d5f609d233f8b61ll, 0xe9c3989a896b89d7ll, 0xeb4f7588bf903347ll, 0x833013f909b93343ll, 0x9a573acb50f4a9ebll, 0x66d01a5810f8d137ll, 0xaa9f929069bcc2dell, 0xa6adb6c784046febll, 0x773fb2dd1fca11d2ll, 0xf8504ef7bbb60baell, 0xb8ff3fd004c40d6dll, 0xa2709481fa5be1f4ll, 0xe3b67f87945b1f0dll, 0xb8c2b550fe024263ll, 0x162da9f5da318c7ell, 0x43bd85c11f0e6f40ll, 0x576e83352bbff70bll, 0x6f532e35310c746ll, 0xde275c4ae8b7c108ll, 0x366542ca116d445dll, 0x192377a9f89ad8f5ll, 0xee8f3b67d22d5d99ll, 0x579cb13009210d66ll, 0xf3873431e3850df3ll, 0x7c69e10852936f22ll, 0x2b3a9bd371dfaba7ll, 0x6be9676d1bbce350ll, 0x7e6ee26c8b0dc356ll, 0x1b3261a0e40f0779ll, 0xa9706717ed456ab8ll, 0x5d765dabbeb674c6ll, 0x7d739283e4f43033ll, 0x8e305790a447736all, 0xe352f5943cf487fbll, 0x64398b5b8cbe1143ll, 0xfc2cb7207d937bd2ll, 0x7753cf89671c8cdell};

unsigned long long py3[] = {0xcacdf749cb8d5f19ll, 0x3a26b17a6f13f006ll, 0x1cde4777eaf1fa11ll, 0xa4414ed881c0e56dll, 0x3b571c5fa5508c0ell, 0x7cdc1849f76f2ec2ll, 0x1a468db56c8568e2ll, 0x8c57ec98bf38fe59ll, 0xd10b947bbcaf4bf5ll, 0x4e64eb670fae53bell, 0x430c61252c4de283ll, 0xab68117b7ff30299ll, 0x26a8f75f7d79ee30ll, 0x1053de0301a4bccbll, 0xbb50c1849212a0f1ll, 0x423862d46548c4bell, 0xc31f86616d9390ecll, 0xfa83bcfd2bc8718fll, 0x22d6538e7ca2b142ll, 0x21ebff421deb94b7ll, 0x8a5128224b2e1e5bll, 0xb518a254c60bd352ll, 0x8c10a7ec1dd632cfll, 0xb8b94fd1a20f561ell, 0xcbf7274e4320fde9ll, 0x7f825189b430ad19ll, 0x7fc5b0de13e6ae42ll, 0xb61ac93784c46e70ll, 0x86e902c618d1d0e2ll, 0xc7ab820d0f5ddfa6ll, 0x2927e90be13fcc69ll, 0x5a7a8539a069fa70ll, 0x8fa0db2c14690950ll, 0xee3365a358ca1d1bll, 0xd2107bae0e0d2c93ll, 0xb19305443f66057ll, 0x505575ab92a3dbd0ll, 0xfc0d0110bab28c74ll, 0x64b5014ed56a5165ll, 0x210a5c2d815d6c7ell, 0x71c2a24bc399717ll, 0x2f7c82a1be3ed40all, 0xa0fe03461542dc9all, 0x9c8175bc3b7aac92ll, 0x52a5d275fa70f38fll, 0x7f280e75ef818498ll, 0x782e3358a54ea194ll, 0xb286ede5b6c69b77ll, 0xb2fae70f5b4cb3e6ll, 0x985669303148fc90ll, 0xba4f880f241bfd5ll, 0x5134a1168ffb9c2bll, 0x88aaa0f440c2fc84ll, 0x732a815a26af6096ll, 0x8ada0e8b66cc7c48ll, 0x85d80c3e63934b97ll, 0xc276948f76dc160cll, 0x83354992d9f8f4ecll, 0xdb89f215877d3fd2ll, 0x607cf4a51e6d4beall, 0x7bc812a269cdb273ll, 0x5e91c14838a6da32ll, 0xeea1beca0c82783cll, 0xb402c8733b869ce8ll, 0x6bb6539a3a626f9fll, 0x65c3c28b9fb0dd7ell, 0xfd31658429a1fd8cll, 0x283fb6056d1dbd54ll, 0x4d1fd3ab9ce96b92ll, 0x59307fca2f3e66d2ll, 0x47899b04717f8830ll, 0x2c04c9c438a97ccell, 0x41a43e034990ccb2ll, 0xac5c62a314ae7fc1ll, 0x2bc9c15f5ce5f21dll, 0x4351c7f4bc543587ll, 0xe714a0633eb54391ll, 0x49a981d8f96d8c83ll, 0xcc039db192259e41ll, 0xb0365ab40ef69a54ll, 0xf7c0aa189d06d5a4ll, 0xe3c9ef6dbcbe0cb3ll, 0x5053f2e2d58472e7ll, 0xeed3a254c43ae758ll, 0x783efea48bc01e51ll, 0xfd450216e34bb240ll, 0xaa59875b491dfe0dll, 0x18c4e66c88aa43a4ll, 0x21ea3d478bc5b59bll, 0x50b61cc4607a4882ll, 0x7c3a24521c8e8bb8ll, 0xdcc23b4a6fae5af9ll, 0x34f723ffe88c492ll, 0x7a1049306af2c39cll, 0xb8fafb10e9e11d70ll, 0x45e280142165ae6ell, 0xd1bc897d2caf1fb5ll, 0x58c41c04b69ddcfdll, 0x3869b0569cc204c5ll, 0xfc0be1c06a7ecb4ell};


unsigned long long dx[] = {0x3e9b58b481a0c1e7ll, 0xd2790f58ad702ac3ll, 0xf3df624ee861f1all, 0x7422dbc25514e317ll, 0xb6c363056b6d570ll, 0x64b8ed462321d1b1ll, 0xfaf242de5b1e7585ll, 0xd4c307f48c33830fll, 0xd418348214808c65ll, 0xf8932fa155f832ebll, 0xd9145a22f78c225cll, 0xac037fc3f8423648ll, 0xa28bafa272ad91a5ll, 0x9795cc3f52dd1fdfll, 0x617bf6ea64012f39ll, 0x15c959cd69b96173ll, 0x79938dacb05340f0ll, 0xb73c17845e5f0655ll, 0x3caed57f4bd41d80ll, 0xa1ce5385c6053c48ll, 0x2970d3e74b38c8a2ll, 0x981e9824714f72f9ll, 0x8d5deba7fe2831cfll, 0x94fc5ff28dd55157ll, 0x9b7d882b71f43546ll, 0x7c6c74ebad9a3f32ll, 0xbebd6b634e1a88eell, 0xeb0ac31cf931b374ll, 0x7861226eaee648bll, 0x3862d67ed71d09f5ll, 0x1505d4e24a270420ll, 0xf8b0088e5648acecll, 0x90c1545404bc4a0ll, 0xe297c7d92264f5fbll, 0x9ab771c2882e07a5ll, 0x30a271fd9414e288ll, 0xc47f35f595e118b5ll, 0x552c5a97b9aa7516ll, 0x144f974df1b2ad09ll, 0x427e96ea27f5846bll, 0x78820a6c772f2688ll, 0x47a88dfd3542f024ll, 0x40c3d261f513e1a8ll, 0xd62b6192ae7bdab9ll, 0x77f9db302dcd5c28ll, 0xba5881b5c7ddd140ll, 0xfe44a6e288bf3851ll, 0x4d1f56e7962c2dell, 0x3c0ca396a6f16a01ll, 0xdea3647470db11b2ll, 0xb1dfb8febcc7541bll, 0x91d5f4ac42502ad1ll, 0x43a3f5dc4363be16ll, 0x60a7186206c08f8bll, 0x4ad258e55da97160ll, 0x510df6e5c3232ec7ll, 0xa2da54efe96f9514ll, 0xe3c1b95dad759e1bll, 0xd03e5645dbea5195ll, 0x2b64bdbb8c1cd0a6ll, 0x3d64efeb284b8ad2ll, 0xed645de57f9311ccll, 0xa9caeb58742da602ll, 0xabb9772059774479ll, 0xa23cae275137c4d1ll, 0x826d0433243e9a9ell, 0x95eba298e227b592ll, 0x3a2ed739fb98c7e9ll, 0x5cfebb35d7f90e1bll, 0xf732aff4ff5a4fb7ll, 0x748112df101e87fcll, 0x834fdc11baab3838ll, 0xd75c9e46d0aee654ll, 0x1745092a6abf8770ll, 0x1362d90dcded199ell, 0x863dfc5e91a7a9b5ll, 0xd18f3cd686e412fll, 0xe04fe216bcc01378ll, 0xb3a1cd3bdce4c117ll, 0x2283efec24582825ll, 0xf744c2c74567e2f5ll, 0x97afc09b7b282e43ll, 0xd198c777f05886bbll, 0x6b23e4c0f51dadb5ll, 0xdae050c76c1eddb3ll, 0xdaab67905a7d0659ll, 0x2b174248a0584645ll, 0xd34e1a4d0bd960b1ll, 0x808d3cc6dd83fc59ll, 0xbf91a51648dd0960ll, 0xf38567e92f48df68ll, 0xacb571f8dd66500ll, 0xecd41f0b86138682ll, 0x21e873127c645bb6ll, 0xb5a0e535ee29b6b1ll, 0xeaeeab56d06c2c0ell, 0x929db043d8f2cdfall, 0xc0d2a2608be97e5ll, 0x426dc138552c4432ll, 0x868a971759b755ccll};

unsigned long long dy[] = {0x3542486d3e8384e3ll, 0x13d051ad6b464dedll, 0x5b42fc37a6293dbdll, 0x6e4b2cbd7e92276fll, 0x9fef0e9c8b15264fll, 0xabb70e6bee9cb2ll, 0xee25466956363179ll, 0xfd11ac5d51563753ll, 0x58b1fc3af2489a29ll, 0xa82aa19eaac8748ll, 0x51f02a42fec69c5fll, 0x725f87d6edcef39ll, 0xb51e0df1a07df532ll, 0x8e08134f4074abd4ll, 0xbfdfdba93252fa31ll, 0x37c5c7692f917865ll, 0xe0ed9cb3d636f6b3ll, 0x5b83a93f64405366ll, 0xf06a4f823a1989d7ll, 0xb9ff31ce194773bfll, 0x1d98a6d47f5270c2ll, 0xb43486e2eb7e136bll, 0x64d788eb8413f93dll, 0x9bb30eb73e93d3b2ll, 0xf309ee64e7d4f92ll, 0xb8dde885b32312all, 0x21118ded95ac6f29ll, 0xc983dab25faec20bll, 0x7b74ac6b8d452c1bll, 0xcaccbe26c46e1ea2ll, 0xfeab89e32a652279ll, 0x81b537578dece23dll, 0x714ece790da7d5ebll, 0x771bbd884024ee48ll, 0x6881642b2437ea69ll, 0x72a353465dbfc234ll, 0x2e7739c8b3284985ll, 0x518b6ce43f74b9fdll, 0x1d11b310f142340cll, 0xb8b5f8a7047cc78bll, 0xc98112a0eccee6aell, 0xd4a12b5796e5b7a0ll, 0x24d6431fd4b6ea05ll, 0xafa380a9e9478faall, 0x98a35a0f382f2211ll, 0x608d3b1db228e853ll, 0xec7ada4b8c2e0277ll, 0x59b28e0ee1d21e1cll, 0xc0a93100d57028call, 0xb2ee8e366d7a78d3ll, 0x409e61311cac105bll, 0x152478a51a53cec0ll, 0xa6a22e64bcf36c49ll, 0x32130c6462739094ll, 0x915ff7ea83bb5e2ll, 0xcc03a67084696f4cll, 0xe208ec68ca092003ll, 0xdb6bf75f2140aa60ll, 0xef36c6cc11586b3cll, 0x8afb419de213ac3dll, 0x5e382f8e520c04e1ll, 0x5f92c6bc34ebbb89ll, 0x398db743bfb374fall, 0xe19e0e6e3ceeaa42ll, 0x9e7ea5242816d0d6ll, 0x11dcaa44038fce38ll, 0xc6e3725ac42e00a4ll, 0x71443ce92e90d37cll, 0x23dd572671f8b692ll, 0xde27f7bde1a28bb9ll, 0xe3fc1cc34a75f2ddll, 0x8e5380a90833dfd6ll, 0x4da2b42de56731fdll, 0x36a6009f9eee69bcll, 0xf4db711db3e119ccll, 0x5e8ccc990795a889ll, 0xafd703419dfea9a0ll, 0x30463f3c6ee2b046ll, 0x9e2b31784a512bbll, 0xe94ad634e74bcf82ll, 0x45f3db452cd7f9bbll, 0xde6b6252dd33782bll, 0x193d5f6c04a27310ll, 0x3acb8fa99c329707ll, 0x22d69badb37471f0ll, 0xf1c99f10c56b7cf5ll, 0xfe6110920f406657ll, 0x2258d6aa622458d9ll, 0xd635d70116f7d3fcll, 0x623d3502b380a0fell, 0x967638214e7752d8ll, 0x8ebe4d0ebc1b3a36ll, 0x4693a1c02ec948b3ll, 0xd30995eb3700fd54ll, 0x703135b40eee5981ll, 0x47513b99adac2c47ll, 0x4807b69ef64a62e3ll, 0x351d3b0f620edf57ll, 0xe2d20985d347dddfll, 0xcf1d0224f5f5ba61ll};

unsigned int dx2[] = {0x90a25e6d, 0x266b1fdd, 0xc7e5f9b1, 0x8b331f76, 0x86c26260, 0x11602198, 0x3d449367, 0xe221abb8, 0x20512bec, 0xee5d4140, 0x7a4a63ea, 0x9c9a8137, 0x4518e71d, 0x90bb01b9, 0xc8a0dbb1, 0x1c5859f8, 0xb71d74a2, 0xe627b83d, 0x63ad710f, 0x1b0590aa, 0x47f31b7d, 0x8b247df8, 0x680ceb24, 0x84c82aa9, 0xe16a482, 0x1b303012, 0xa6208757, 0x62842d6f, 0x27ae4f0c, 0x893d6f09, 0xa4687085, 0xa1ffc667, 0xea82a239, 0x17d73135, 0xcb5a9d69, 0x9fb058fc, 0x2998e75c, 0xf0fc9d2, 0xfb1c8ce, 0x79e3bc7c, 0x231366b5, 0x40392f2, 0x3a096a07, 0xd3b975cf, 0xfc49c863, 0xd9b437c6, 0xfea912dc, 0x67224518, 0x92ea1d92, 0x32594898, 0x7436f88d, 0x9a3b2801, 0x54930fd, 0x9273f995, 0x3b9bdecb, 0x44a0665f, 0xde53d2e8, 0xe611f8a1, 0x47dd26d5, 0x62006088, 0x18adef96, 0x40a57445, 0x96d64655, 0xc1c91992, 0xd8d12730, 0x7aeda909, 0x85eaf4c4, 0x60f20c05, 0xc1ed3293, 0xc322ca3f, 0x4c7ed042, 0x73c2b31d, 0xe0396b9d, 0x3020d47f, 0xd4c5d6c6, 0x523f71c0, 0x8ce47a37, 0x7859e90a, 0x7686e532, 0xdb086e00, 0x909ac2c3, 0x574ed015, 0x9e6fa778, 0x54ecf2a9, 0x2db98885, 0xec671188, 0xc0de2005, 0x5ec92a71, 0x78b628e2, 0x9c9816e2, 0x69e13f3d, 0x4fc3827b, 0xae393a9e, 0x6f45648, 0xa85e2113, 0xa2b591bc, 0xaaca0b99, 0x24033483, 0xf90f13b2, 0xa29a99cc};

unsigned int dy2[] = {0x90a25e6d, 0x266b1fdd, 0xc7e5f9b1, 0x8b331f76, 0x86c26260, 0x11602198, 0x3d449367, 0xe221abb8, 0x20512bec, 0xee5d4140, 0x7a4a63ea, 0x9c9a8137, 0x4518e71d, 0x90bb01b9, 0xc8a0dbb1, 0x1c5859f8, 0xb71d74a2, 0xe627b83d, 0x63ad710f, 0x1b0590aa, 0x47f31b7d, 0x8b247df8, 0x680ceb24, 0x84c82aa9, 0xe16a482, 0x1b303012, 0xa6208757, 0x62842d6f, 0x27ae4f0c, 0x893d6f09, 0xa4687085, 0xa1ffc667, 0xea82a239, 0x17d73135, 0xcb5a9d69, 0x9fb058fc, 0x2998e75c, 0xf0fc9d2, 0xfb1c8ce, 0x79e3bc7c, 0x231366b5, 0x40392f2, 0x3a096a07, 0xd3b975cf, 0xfc49c863, 0xd9b437c6, 0xfea912dc, 0x67224518, 0x92ea1d92, 0x32594898, 0x7436f88d, 0x9a3b2801, 0x54930fd, 0x9273f995, 0x3b9bdecb, 0x44a0665f, 0xde53d2e8, 0xe611f8a1, 0x47dd26d5, 0x62006088, 0x18adef96, 0x40a57445, 0x96d64655, 0xc1c91992, 0xd8d12730, 0x7aeda909, 0x85eaf4c4, 0x60f20c05, 0xc1ed3293, 0xc322ca3f, 0x4c7ed042, 0x73c2b31d, 0xe0396b9d, 0x3020d47f, 0xd4c5d6c6, 0x523f71c0, 0x8ce47a37, 0x7859e90a, 0x7686e532, 0xdb086e00, 0x909ac2c3, 0x574ed015, 0x9e6fa778, 0x54ecf2a9, 0x2db98885, 0xec671188, 0xc0de2005, 0x5ec92a71, 0x78b628e2, 0x9c9816e2, 0x69e13f3d, 0x4fc3827b, 0xae393a9e, 0x6f45648, 0xa85e2113, 0xa2b591bc, 0xaaca0b99, 0x24033483, 0xf90f13b2, 0xa29a99cc};


void make_uint288(uint288* out, uint* in, int len) {
    int blocks = len / 8;
    for (int i = 0; i < 8; i++) {
        for (int j = 0; j < blocks; j++) {
            for (int k = 0; k < 9; k++) {
                out[i + j*8].data[k] = in[i * 9 + k];
            }
            //out[i + j * 8].data[0] = 0;
        }
    }
    printf("check uint288: ");
    for (int i = 0; i < 9; i++) {
        printf("0x%llx ", out[0].data[i]);
    }
    printf("\n");
}

#ifndef dh_mybig_copy
#define dh_mybig_copy(a,b) {(a)[0]=(b)[0];(a)[1]=(b)[1];(a)[2]=(b)[2];(a)[3]=(b)[3];}
#endif

void my_point_copy(Jpoint* from, Jpoint* to) {
    dh_mybig_copy(to->x, from->x);
    dh_mybig_copy(to->y, from->y);
    dh_mybig_copy(to->x, from->z);
}



void print_big_arr(UINT64* nums,int n){
    for(int i=0;i<n;i++){
        h_mybig_print(nums+i*4);
        printf("\n");
    }
}
void print_jpoint_arr(Jpoint* nums,int n){
    for(int i=0;i<n;i++){
        h_print_pointJ(nums+i);
        printf("\n");
    }
}

void init_Jpoint_toOne(Jpoint* p){
    for(int i=0;i<N_POINT;i++){
        for(int j=0;j<4;j++){
            p[i].x[j] = h_Gx[j];
            p[i].y[j] = h_Gy[j];
            p[i].z[j] = h_ONE[j];
        }
    }
}
/*
void init_Jpoint(Jpoint* p){
    for(int i=0;i<N_POINT;i++){
        for(int j=0;j<4;j++){
            p[i].x[j] = h_6Gx[j];
            p[i].y[j] = h_6Gy[j];
            p[i].z[j] = h_6Gz[j];
        }
    }
}
*/

// these functions are not jp1 -> jp2(mont), but jp1 -> jp1(mont), jp2 -> jp2(mont).
void __global__ point_to_monjj(Jpoint* jp1,Jpoint* jp2){
    // int tx = threadIdx.x;
    int idx = threadIdx.x + blockDim.x*blockIdx.x;
    if(idx<N_BIGNUM){
        dh_mybig_monmult_64((jp1+idx)->x,dc_R2,(jp1+idx)->x);
        dh_mybig_monmult_64((jp1+idx)->y,dc_R2,(jp1+idx)->y);
        dh_mybig_monmult_64((jp1+idx)->z,dc_R2,(jp1+idx)->z);

        dh_mybig_monmult_64((jp2+idx)->x,dc_R2,(jp2+idx)->x);
        dh_mybig_monmult_64((jp2+idx)->y,dc_R2,(jp2+idx)->y);
        dh_mybig_monmult_64((jp2+idx)->z,dc_R2,(jp2+idx)->z);
    }

}

void __global__ point_from_monjj(Jpoint* jp1,Jpoint* jp2){
    // int tx = threadIdx.x;
    int idx = threadIdx.x + blockDim.x*blockIdx.x;
    if(idx<N_BIGNUM){
        dh_mybig_monmult_64((jp1+idx)->x,dc_ONE,(jp1+idx)->x);
        dh_mybig_monmult_64((jp1+idx)->y,dc_ONE,(jp1+idx)->y);
        dh_mybig_monmult_64((jp1+idx)->z,dc_ONE,(jp1+idx)->z);

        dh_mybig_monmult_64((jp2+idx)->x,dc_ONE,(jp2+idx)->x);
        dh_mybig_monmult_64((jp2+idx)->y,dc_ONE,(jp2+idx)->y);
        dh_mybig_monmult_64((jp2+idx)->z,dc_ONE,(jp2+idx)->z);
    }

}


/**
 *
 * @param in
 * @param out
 */
// __global__ void multi_scalar_multiple(DBC* dbc, Jpoint* in, Jpoint* out) {
//     int tx = threadIdx.x;
//     int bx = blockIdx.x;
//     int nthread = blockDim.x; // nthread should be 1024.
//     Jpoint *start = in + nthread * bx; // this thread's start point.
//     int dbc_id = nthread * bx + tx;

//     run_DBC(&dbc[dbc_id], &start[tx], &start[tx]);
//     __syncthreads();
//     for(int i = (nthread >> 1); i; i >>= 1){
//         if(tx < i)
//             dh_ellipticAdd_JJ(&start[tx*2],&start[tx*2+i],&start[tx*2]);
//         __syncthreads();
//     }

//     if (tx == 0) {
//         out[bx] = start[0];
//     }
// }

__global__ void accumulate_sum(Jpoint* in) { //in = out[]
    int tx = threadIdx.x;
    int nthread = blockDim.x;
    for (int i = (nthread >> 1); i; i >>= 1) { // 5 = log2(thread)
        if (tx < i) {
            dh_ellipticAdd_JJ(&in[tx*2], &in[tx*2 + 1], &in[tx*2]);
        }
        __syncthreads();
    }
    // res == in[0]
}

__global__ void accumulate_sum_per_block(Jpoint* in) { //in = out[]
    int bx = blockIdx.x;
    int tx = threadIdx.x;
    int nthread = blockDim.x;
    if (bx == 512) {
        dh_ellipticAdd_JJ(&in[0], &in[N_BIGNUM-1], &in[0]);
        return;
    } 
    in = in + bx * nthread * 2;
     for (int i = nthread, j = 1; i; i /= 2, j++) { // 5 = log2(thread)
        #ifdef DEBUG
                if (tx == 0) {
                    //printf("tx=%d, point=%llx\n", tx, in[tx].x[0]);
                }
        #endif
                if (tx < i) {
                    
                    printf("tx=%d, before add: point1=%llx, point2=%llx\n", tx, in[tx].x[0], in[tx + i].x[0]);
        #ifdef VERBOSE_MODE
                    dh_ellipticAdd_JJ_verbose(&in[tx], &in[tx + i], &in[tx]);
        #else
                    dh_ellipticAdd_JJ(&in[tx], &in[tx + i], &in[tx]);
        #endif
                    printf("tx=%d, after add: point=%llx\n", tx, in[tx].x[0]);
                }
                __syncthreads();
        }
    
   
       
}

void __global__ test_dbc_init() {
    //init(7);
}


void __global__ testTriple(Jpoint* p1, Jpoint* p2) {
    UINT64 zinv[4], zinv2[4];
    int tx = threadIdx.x;
    ppoint_triple(p1+tx, p2+tx);
    dh_mybig_moninv((p2+tx)->z, zinv);
    dh_mybig_monmult_64(zinv, dc_R2, zinv);
    dh_mybig_monmult_64(zinv, zinv, zinv2);
    dh_mybig_monmult_64((p2+tx)->x, zinv2, (p2+tx)->x);
    dh_mybig_monmult_64(zinv, zinv2, zinv);
    dh_mybig_monmult_64((p2+tx)->y, zinv, (p2+tx)->y);
}


void __global__ testdouble(UINT64* a ,UINT64* b){ //only for warm-up.
    int tx = threadIdx.x;
    dh_mybig_moddouble_64(a+tx*4,dc_p,b+tx*4);
}
void __global__ test_point_double(Jpoint *p1,Jpoint *p2){//only for warm-up.
    UINT64 zinv[4], zinv2[4];
    int tx = threadIdx.x;
    ppoint_double(p1+tx, p2+tx);
    dh_mybig_moninv((p2+tx)->z, zinv);
    dh_mybig_monmult_64(zinv, dc_R2, zinv);
    dh_mybig_monmult_64(zinv, zinv, zinv2);
    dh_mybig_monmult_64((p2+tx)->x, zinv2, (p2+tx)->x);
    dh_mybig_monmult_64(zinv, zinv2, zinv);
    dh_mybig_monmult_64((p2+tx)->y, zinv, (p2+tx)->y);
}

// __global__ void test_make_dbc(DBC* dbc, uint288* scalar) {
//     int tx = threadIdx.x;
//     int bx = blockIdx.x;
//     int nthread = blockDim.x; // nthread should be 1024.
//     DBC *start = dbc + nthread * bx; // this thread's start point.
//     uint288 *n = scalar + nthread * bx; // this thread's start point.
//     start[tx].get(n + tx, 0);
// }

// __global__ void test_main(DBC* dbc, uint288* scalar, Jpoint* in, Jpoint* out) {
//     int tx = threadIdx.x;
//     int bx = blockIdx.x;
//     int nthread = blockDim.x; // nthread should be 1024.x
//     int dbc_id = nthread * bx + tx;
//     Jpoint *start = in + nthread * bx; // this thread's start point.
//     //DBC* dbc_block = dbc + nthread * bx;
//     uint288 *n = scalar + nthread * bx + tx; // this thread's start point.

// #ifndef DEBUG
//     //dbc[dbc_id].get(n, 0);    
// #else
//     if (tx == 0 && bx == 0) {
//         dbc[dbc_id].get(n, 0); // now : no need for monitoing.
//         printf("check uint288: ");
//         for (int i = 0; i < 9; i++) {
//             printf("0x%llx ", n->data[i]);
//         }
//         printf("\n");
//     } else {
//         dbc[dbc_id].get(n, 0);
//     }

//     if (tx == 0 && bx == 0) {
//         printf("check dbc: ");
//         for (int i = 0; i < 30; i++) {
//             printf("(2^%d, 3^%d) ", dbc[dbc_id].data[i].dbl, dbc[dbc_id].data[i].tpl);
//         }
//         printf("\ndbc len is %d: \n", dbc[dbc_id].length);
//         printf("\n");
//     }
// #endif
//     __syncthreads();

//     //run_DBC(&dbc[dbc_id], &start[tx], &start[tx]);
//     __syncthreads();

// #ifdef DEBUG
//     if (tx == 0 && bx == 0) {
//         printf("check point out:\n");
//         for (int i = 0 ; i < 4; i++) {
//             printf("0x%llx ", start[tx].x[i]);
//         }
//         printf("\n");
//     }
// #endif
//     for(int i = (nthread >> 1); i; i >>= 1){
//         if(tx < i)
//             dh_ellipticAdd_JJ(&start[tx*2],&start[tx*2+i],&start[tx*2]);
//         __syncthreads();
//     }

//     if (tx == 0) {
//         out[bx] = start[0];
//     }
// }



__global__ void test_main(uint288* scalar, Jpoint* in, Jpoint* out) {
    int tx = threadIdx.x;
    int bx = blockIdx.x;
    int nthread = blockDim.x;
    int dbc_id = nthread * bx + tx;

    Jpoint* from = in + nthread * bx;
    

}

int main(){
    cudaSetDevice(3);

    struct timeval s1,e1;
    long long time_use=1;
    int nB,nT;

    cudaOccupancyMaxPotentialBlockSize(&nB,&nT,accumulate_sum);
    printf("NB=%d,NT=%d\n",nB,nT);
    cudaOccupancyMaxPotentialBlockSize(&nB,&nT,point_to_monjj);
    printf("NB=%d,NT=%d\n",nB,nT);
    cudaOccupancyMaxPotentialBlockSize(&nB,&nT,point_from_monjj);
    printf("NB=%d,NT=%d\n",nB,nT);

    printf("General Status:\nBLocks = %d, Threads = %d\nNumber of Points: %d\n", N_BLOCK, N_THREAD_PER_BLOCK, BATCHSIZE);

    Jpoint* h_p1;
    Jpoint* h_p2;
    Jpoint* d_p1;
    Jpoint* d_p2;
    Jpoint* dx_p1;
    Jpoint* dx_p2;
    Jpoint* dxp_p1;
    Jpoint* dxp_p2;
    Jpoint* t_p1;
    Jpoint* t_p2;
    Jpoint* td_p1;
    Jpoint* td_p2;

    UINT64* h_num;
    UINT64* d_num;
    uint288* scalar;
    uint288* d_scalar;
    int* dbc_store;
    int* dbc_len;
    void* d_debug;



    CUDA_CHECK_ERROR();

    // h_p1 = (Jpoint*)malloc(N_POINT*sizeof(Jpoint));
    // h_p2 = (Jpoint*)malloc(N_POINT*sizeof(Jpoint));
    h_num = (UINT64*)malloc(4*BATCHSIZE*sizeof(UINT64));
    //dbc = new DBCv2[BATCHSIZE];

    scalar = (uint288*)malloc(BATCHSIZE*sizeof(uint288));
    dbc_store = (int*)malloc(6 * DBC_MAXLENGTH * BATCHSIZE * sizeof(int)); // dbc_store[2][DBC_MAXSIZE][3];
    dbc_len = (int*)malloc(2 * BATCHSIZE * sizeof(int)); // dbc_len[2];
    int dbc_size = 6 * DBC_MAXLENGTH;
    make_uint288(scalar, dx2, BATCHSIZE); // init int288


    t_p1 = (Jpoint*)malloc(100 * sizeof(Jpoint));
    t_p2 = (Jpoint*)malloc(100 * sizeof(Jpoint));
    dx_p1 = (Jpoint*)malloc(100 * sizeof(Jpoint));
    for (int i = 0; i < 100; i++) {
        for(int j = 0;j < 4; j++){
            t_p1[i].x[j] = px[i*4+j];
            t_p1[i].y[j] = py[i*4+j];
            t_p1[i].z[j] = h_ONE[j];
            dx_p1[i].x[j] = dx[i*4+j];
            dx_p1[i].y[j] = dy[i*4+j];
            dx_p1[i].z[j] = h_ONE[j];
        }
    }
#ifdef DEBUG
    printf("dx_p1(long long):\n");
    for (int i = 0; i < 10; i++) {
        printf("0x%llx 0x%llx 0x%llx 0x%llx\n", dx_p1[i].x[0], dx_p1[i].x[1], dx_p1[i].x[2], dx_p1[i].x[3]);
    }
#endif

    // predefined dbc experiments..
    // init_Jpoint_toOne(h_p1);
    // init_Jpoint_toOne(h_p2);
    // //init_random_big(h_num);
#ifdef PRECOMPUTE
    read_in_small_DBC(dbc, 32);
    for (int i = 32; i < N_BIGNUM; i *= 2) {
         my_dbc_copy(dbc, dbc + i, i);
    }
#endif
    // for (int i = 0; i < N_BIGNUM; i++) {
    //     my_point_copy(&testG, &h_p1[i]);
    // }

//===========init and make data.


    CUDA_SAFE_CALL(cudaMalloc((void**)&d_p1,N_POINT*sizeof(Jpoint)));
    CUDA_SAFE_CALL(cudaMalloc((void**)&d_p2,N_POINT*sizeof(Jpoint)));
    CUDA_SAFE_CALL(cudaMalloc((void**)&d_scalar,sizeof(uint288)*N_BIGNUM));

    CUDA_SAFE_CALL(cudaMalloc((void**)&td_p1, 100 * sizeof(Jpoint)));
    CUDA_SAFE_CALL(cudaMalloc((void**)&td_p2, 100 * sizeof(Jpoint)));
    CUDA_SAFE_CALL(cudaMalloc((void**)&dxp_p1, 100 * sizeof(Jpoint)));
    CUDA_SAFE_CALL(cudaMalloc((void**)&dxp_p2, 100 * sizeof(Jpoint)));
    CUDA_SAFE_CALL(cudaMemcpy(td_p1, t_p1, 100 * sizeof(Jpoint), cudaMemcpyHostToDevice));
    CUDA_SAFE_CALL(cudaMemcpy(dxp_p1, dx_p1, 100 * sizeof(Jpoint), cudaMemcpyHostToDevice));
    //CUDA_SAFE_CALL(cudaMemcpy(d_dbc, dbc, sizeof(DBC)*N_BIGNUM, cudaMemcpyHostToDevice));
    CUDA_SAFE_CALL(cudaMemcpy(d_scalar, scalar, N_BIGNUM*sizeof(uint288),cudaMemcpyHostToDevice));
    
    // printf("check dbc second time:\n");
    // for (int i = 0; i < 20; i++) {
    //     for (int j = 0; j < 16; j++) {
    //         printf("(%d %d %d)\t", dbc[0].w_rec[i][j][0], dbc[0].w_rec[i][j][1], dbc[0].w_rec[i][j][2]);
    //     }
    //     printf("\n\n");
    // }
    // printf("\n");


//===========warm up

    gettimeofday(&s1,NULL);
    //CUDA_SAFE_CALL(cudaMemcpy(d_num,h_num,sizeof(UINT64)*4*N_BIGNUM,cudaMemcpyHostToDevice));
    // CUDA_SAFE_CALL(cudaMemcpy(d_p1,h_p1,N_POINT*sizeof(Jpoint),cudaMemcpyHostToDevice));
    // CUDA_SAFE_CALL(cudaMemcpy(d_p2,h_p2,N_POINT*sizeof(Jpoint),cudaMemcpyHostToDevice));
    //CUDA_SAFE_CALL(cudaMemcpy(d_dbc,dbc,N_BIGNUM*sizeof(DBC),cudaMemcpyHostToDevice));
    point_to_monjj<<<N_BLOCK,N_THREAD_PER_BLOCK>>>(d_p1,d_p2);

    // testbasemul<<<N_BLOCK,N_THREAD_PER_BLOCK>>>(d_p1,d_num);
    test_point_double<<<N_BLOCK,N_THREAD_PER_BLOCK>>>(d_p1,d_p2);

    point_from_monjj<<<N_BLOCK,N_THREAD_PER_BLOCK>>>(d_p1,d_p2);

    // CUDA_SAFE_CALL(cudaMemcpy(h_p1,d_p1,N_POINT*sizeof(Jpoint),cudaMemcpyDeviceToHost));
    // CUDA_SAFE_CALL(cudaMemcpy(h_p2,d_p2,N_POINT*sizeof(Jpoint),cudaMemcpyDeviceToHost));
    //print_jpoint_arr(h_p1,1);
    gettimeofday(&e1,NULL);
    time_use=(e1.tv_sec-s1.tv_sec)*1000000+(e1.tv_usec-s1.tv_usec);//微秒
    printf("warm up time usage is %ld us\n",time_use);


//==================warm end


    // test Triple
    CUDA_CHECK_ERROR();
#ifdef DEBUG
    printf("td_p1:\n");
    CUDA_SAFE_CALL(cudaMemcpy(t_p2, td_p1,100*sizeof(Jpoint),cudaMemcpyDeviceToHost));
    for (int i = 0; i < 10; i++) {
        printf("0x%llx 0x%llx 0x%llx 0x%llx\n", t_p2[i].x[0], t_p2[i].x[1], t_p2[i].x[2], t_p2[i].x[3]);
    }
#endif

    point_to_monjj<<<1, 100>>>(td_p1, dxp_p1);
    cudaDeviceSynchronize();

    testTriple<<<1, 100>>>(td_p1, td_p2);
    cudaDeviceSynchronize();
    test_point_double<<<1, 100>>>(dxp_p1, dxp_p2);
    cudaDeviceSynchronize();

    // printf("Triple:\n");
    // CUDA_SAFE_CALL(cudaMemcpy(t_p1, td_p2,100*sizeof(Jpoint),cudaMemcpyDeviceToHost));
    // for (int i = 0; i < 10; i++) {
    //     printf("0x%x 0x%x 0x%x 0x%x\n", t_p1[i].x[0], t_p1[i].x[1], t_p1[i].x[2], t_p1[i].x[3]);
    // }

    point_from_monjj<<<1, 100>>>(td_p2, dxp_p2);
    cudaDeviceSynchronize();

#ifdef DEBUG
    printf("Triple t1:\n");
    CUDA_SAFE_CALL(cudaMemcpy(t_p1,td_p2,100*sizeof(Jpoint),cudaMemcpyDeviceToHost));
    for (int i = 0; i < 10; i++) {
        printf("0x%llx 0x%llx 0x%llx 0x%llx\n", t_p1[i].x[0], t_p1[i].x[1], t_p1[i].x[2], t_p1[i].x[3]);
    }
    printf("Double dx1:\n");
    CUDA_SAFE_CALL(cudaMemcpy(t_p1,dxp_p2,100*sizeof(Jpoint),cudaMemcpyDeviceToHost));
    for (int i = 0; i < 10; i++) {
        printf("0x%llx 0x%llx 0x%llx 0x%llx\n", t_p1[i].x[0], t_p1[i].x[1], t_p1[i].x[2], t_p1[i].x[3]);
    }
#endif

    // testTriple<<<1, 100>>>(td_p1, td_p2);
    // cudaDeviceSynchronize();

    // printf("Triple fast:\n");
    // CUDA_SAFE_CALL(cudaMemcpy(t_p1,td_p2,100*sizeof(Jpoint),cudaMemcpyDeviceToHost));
    // for (int i = 0; i < 10; i++) {
    //     printf("0x%x 0x%x 0x%x 0x%x\n", t_p1[i].x[0], t_p1[i].x[1], t_p1[i].x[2], t_p1[i].x[3]);
    // }

    // point_from_monjj<<<1, 100>>>(td_p1, td_p2);
    // cudaDeviceSynchronize();

    // printf("Triple fast t1:\n");
    // CUDA_SAFE_CALL(cudaMemcpy(t_p1,td_p2,100*sizeof(Jpoint),cudaMemcpyDeviceToHost));
    // for (int i = 0; i < 10; i++) {
    //     printf("0x%x 0x%x 0x%x 0x%x\n", t_p1[i].x[0], t_p1[i].x[1], t_p1[i].x[2], t_p1[i].x[3]);
    // }

    // init data

//================== test end 

    gettimeofday(&s1,NULL);

    point_to_monjj<<<N_BLOCK,N_THREAD_PER_BLOCK>>>(d_p1,d_p2);
    cudaDeviceSynchronize();

#ifdef PRECOMPUTE
    multi_scalar_multiple<<<N_BLOCK,N_THREAD_PER_BLOCK>>>(d_dbc, d_p1, d_p2);
#else
    //test_main<<<N_BLOCK,N_THREAD_PER_BLOCK>>>(d_dbc, d_scalar, d_p1, d_p2);
#endif

    cudaDeviceSynchronize();
    accumulate_sum_per_block<<<1,N_BLOCK/2>>>(d_p2);
    
    cudaDeviceSynchronize();

#ifdef DEBUG
    printf("dbc dp1:\n");
    CUDA_SAFE_CALL(cudaMemcpy(t_p1,d_p1,100*sizeof(Jpoint),cudaMemcpyDeviceToHost));
    for (int i = 0; i < 10; i++) {
        printf("0x%llx 0x%llx 0x%llx 0x%llx\n", t_p1[i].x[0], t_p1[i].x[1], t_p1[i].x[2], t_p1[i].x[3]);
    }
#endif

    point_from_monjj<<<N_BLOCK,N_THREAD_PER_BLOCK>>>(d_p2,d_p1);
    cudaDeviceSynchronize();

    CUDA_CHECK_ERROR();
    gettimeofday(&e1,NULL);
    time_use=(e1.tv_sec-s1.tv_sec)*1000000+(e1.tv_usec-s1.tv_usec);//微秒
    printf("time_use is %ld us\n",time_use);

    //free(h_p1);
    //free(h_p2);
    CUDA_SAFE_CALL(cudaFree(d_p1));
    CUDA_SAFE_CALL(cudaFree(d_p2));
    CUDA_SAFE_CALL(cudaFree(dxp_p1));
    CUDA_SAFE_CALL(cudaFree(dxp_p2));
    CUDA_SAFE_CALL(cudaFree(d_scalar));

}