from fastecdsa import keys, curve
from fastecdsa.curve import Curve
from fastecdsa.point import Point
"""The reason there are two ways to generate a keypair is that generating the public key requires
a point multiplication, which can be expensive. That means sometimes you may want to delay
generating the public key until it is actually needed."""
P = 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
N = 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001
R = 2 ** 256
def check(p: Point):
    x = p.x
    print(hex(x))

def checkmont(p: Point):
    x = p.x * R % P
    print("mont field: " + hex(x))

newcurve = Curve(
    "bn128",
    0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47,
    0,
    3,
    0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001,
    0,
    0
)

Sbits = [2**64 - 1, 2 ** 128 - 2 ** 64, 2 ** 192 - 2 ** 128, 2 ** 256 - 2 ** 192]
DBCbits = 2**32 - 1

def printhex(n: int):
    print('{%sULL, %sULL, %sULL, %sULL}, ' % (hex(n & Sbits[0]), hex((n & Sbits[1]) >> 64), hex((n & Sbits[2]) >> 128), hex((n & Sbits[3]) >> 192)))



xs = 0x12626df20be795ac5591098a24842f91748a78f2c040960067277bfb1bf5a2b3
ys = 0x1bad4003b802c9f010f275339bbfae518c96ca0019f2e7e5150620a3cef1c399
scalar = 5901664031594756870901022840938571430092748518409938027808594609694559595531

S = [5901664031594756870901022840938571430092748518409938027808594609694559595531,
2623993134767973899289026264413087532500524413624878814009764222325597261423,
21536516095492148955926400459326318354787479683894604959013999595938307543408,
8619119152910271275562400520704630107612125198836194225804093994418265177188,
11612911370022030770245146762178382661096544091795646305167993103018376951067,
916001624449196127630242380495121388564952098691204606796867878355293039323,
17663382923052736545383024843896701924213150489182001134886336356432056114680,
17649087800562696877348783588431102909263456041751169867330057717444634239422,
]

Gx=[
    0x67277bfb1bf5a2b3748a78f2c04096005591098a24842f9112626df20be795ac,
    0x96b8a79d4e7b2fa0a7b255b7ce68b7d1748d51201c6bc97edd668431802799,
    0xdef8a6ee1b1ee6fd421897ed0b53689c4eab68e7d44f2f901e2b172af72f5598,
    0x6ba406241ec03abf4ac6af3893510bb3f2ac4eb7d195380b6de870c977240c,
    0x9d453953d29b791f3e21372b6d330e9433f52c13f38afa1f29b073c75fb72771,
    0x5168b89708f5e1ebd2668b78e993750d2edace5f7678bcf15b8fa45091ab9e1,
    0x25d86e3d59542496e2a8e448860f425d7d259942ea4136301be50b1000752ffd,
    0x10b30dbe33895a85ce23b30959e50cfab9844001735f9518271e9140aa677758,
    ]

Gy = [
    0x150620a3cef1c3998c96ca0019f2e7e510f275339bbfae511bad4003b802c9f0,
    0x7ac3a975b78f95a1adfe813cec94508e6200f7a5f012802f22105cbf9fa748b6,
    0x14f575b3826685792bd5a70a46be0b283eefe424a72226d6b193a5e58e61fc5,
    0x4deddbd4c1e9a5931128bf643f129ca8cdab7431aa096ad72e52ec348f885c0c,
    0xd6a36c9b5f868b699558c02e3a5baeaeb492ae1a12637ff7217ca8ee989a5d43,
    0x84cf60064067242840ca230e51fcc345523a2d9de4c48d1a2acf4d5231cb7411,
    0xb2458c27d6900e1cc06d987d52dc3320cadb27d8f29fd6c922779b1d38ce6d7,
    0xb4e8c2f9c0db3ea372b99a23081ae9a46688814cde0fcb8429550fd01950fa3b,
]

G1=[(8315541102759673888994266260586684534029987211131050230779955544331814019763,12518553265979496493392015210266627661583007552742353644417022337371836892057,1),
(6723560623535107144207706037389920940114800905184304377927762552249762131872,15407546531694700546550500174589720931733072410403250332209617868301777474977,1),
(13645519779798806647130136282899172569179124337099591685288391423195044833021,5020015355920639677296588378041846894999964031676116774564009444462599505273,1),
(194190575944108340600362361185469292675288163976001615739205517918341184191,20952902723312903427306744437328936096352718394734982719230687532269458531731,1),
(18856590951254198166306424366464497780753000663170872883812686212232514337055,15146578965204848199065713832549611610945827956494745455924366525801563589481,1),
(2588391400617377434525507139927606866925885858029755625569611624228773552619,19363410633334641609250876362033497652652320141179618187214581475403947779112,1),
(12617131240199611993731282771460751367236696721094148967775226528004757005462,974372638190268661354797994562216378275637043565041470741621249324224613916,1),
(17694209003293265114404082235369001397433142629623827597142786332354543180421,18695117928950312707345287902874428220201286521310282804871098177933769653923,1),]

p = Point(0xedd6684318027990748d51201c6bc97a7b255b7ce68b7d196b8a79d4e7b2fa0, 0x22105cbf9fa748b66200f7a5f012802fadfe813cec94508e7ac3a975b78f95a1, curve=newcurve)
print(0x0d0c393540b8cf2c076121c91055f4fd82c20ef00dbda17ef4e7df38c8ba6c0b * p)
print('\n')
rawp = [Point(G1[i][0], G1[i][1], curve=newcurve) for i in range(0, 8)]
for i in range(0, 8):
    print(hex(S[i]) + ' * ')
    print(rawp[i])

ps = [S[i] * Point(G1[i][0], G1[i][1], curve=newcurve) for i in range(0, 8) ]
ans = 0
print('single values:')
for p in ps:
    check(p)
    if ans is 0:
        ans = p
    else:
        ans = ans + p

print('check ans:')
checkmont(ans)
check(ans)
print('\n')
p = Point(xs, ys, curve=newcurve)
# checkmont(p)
# p = scalar * p
# check(p)

# generate a keypair (i.e. both keys) for curve P256
priv_key, pub_key = keys.gen_keypair(curve.P256)

# generate a private key for curve P256
priv_key = keys.gen_private_key(curve.P256)

# get the public key corresponding to the private key we just generated
pub_key = keys.get_public_key(priv_key, curve.P256)

print(pub_key)